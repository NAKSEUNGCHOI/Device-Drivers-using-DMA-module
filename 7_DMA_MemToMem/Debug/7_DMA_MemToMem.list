
7_DMA_MemToMem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001598  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08001738  08001738  00011738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017e8  080017e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080017e8  080017e8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017e8  080017e8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017e8  080017e8  000117e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017ec  080017ec  000117ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080017f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000070  08001860  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08001860  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000024de  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a5e  00000000  00000000  0002257e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000300  00000000  00000000  00022fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000278  00000000  00000000  000232e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c0b  00000000  00000000  00023558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003c16  00000000  00000000  00039163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085b66  00000000  00000000  0003cd79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c28df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001168  00000000  00000000  000c2930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001720 	.word	0x08001720

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08001720 	.word	0x08001720

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	; (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <DMA2_mem2mem_init>:
 *      Author: chlsk
 */

#include "dma.h"

void DMA2_mem2mem_init(void){
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0

	/*1. enable clock access to DMA2 */
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 80002c0:	4b26      	ldr	r3, [pc, #152]	; (800035c <DMA2_mem2mem_init+0xa0>)
 80002c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c4:	4a25      	ldr	r2, [pc, #148]	; (800035c <DMA2_mem2mem_init+0xa0>)
 80002c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002ca:	6313      	str	r3, [r2, #48]	; 0x30

	/*2. Disable DMA stream */
	DMA2_Stream0->CR &= ~(DMA_SxCR_EN);
 80002cc:	4b24      	ldr	r3, [pc, #144]	; (8000360 <DMA2_mem2mem_init+0xa4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a23      	ldr	r2, [pc, #140]	; (8000360 <DMA2_mem2mem_init+0xa4>)
 80002d2:	f023 0301 	bic.w	r3, r3, #1
 80002d6:	6013      	str	r3, [r2, #0]

	/*3. Wait until DMA stream is disabled. */
	while(DMA2_Stream0->CR & DMA_SxCR_EN){}
 80002d8:	bf00      	nop
 80002da:	4b21      	ldr	r3, [pc, #132]	; (8000360 <DMA2_mem2mem_init+0xa4>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f003 0301 	and.w	r3, r3, #1
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d1f9      	bne.n	80002da <DMA2_mem2mem_init+0x1e>

	/*4. Configure dma parameters */

	/*4.1. Set Memory size = half-word (16 bit) */
	DMA2_Stream0->CR |= DMA_SxCR_MSIZE_0;
 80002e6:	4b1e      	ldr	r3, [pc, #120]	; (8000360 <DMA2_mem2mem_init+0xa4>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4a1d      	ldr	r2, [pc, #116]	; (8000360 <DMA2_mem2mem_init+0xa4>)
 80002ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002f0:	6013      	str	r3, [r2, #0]

	/*4.2. Set Peripheral data size to half-word */
	DMA2_Stream0->CR |= DMA_SxCR_PSIZE_0;
 80002f2:	4b1b      	ldr	r3, [pc, #108]	; (8000360 <DMA2_mem2mem_init+0xa4>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a1a      	ldr	r2, [pc, #104]	; (8000360 <DMA2_mem2mem_init+0xa4>)
 80002f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002fc:	6013      	str	r3, [r2, #0]

	/*4.3. Enable memory increment */
	DMA2_Stream0->CR |= DMA_SxCR_MINC;
 80002fe:	4b18      	ldr	r3, [pc, #96]	; (8000360 <DMA2_mem2mem_init+0xa4>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4a17      	ldr	r2, [pc, #92]	; (8000360 <DMA2_mem2mem_init+0xa4>)
 8000304:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000308:	6013      	str	r3, [r2, #0]

	/*4.4. Enable peripheral address increment */
	DMA2_Stream0->CR |= DMA_SxCR_PINC;
 800030a:	4b15      	ldr	r3, [pc, #84]	; (8000360 <DMA2_mem2mem_init+0xa4>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4a14      	ldr	r2, [pc, #80]	; (8000360 <DMA2_mem2mem_init+0xa4>)
 8000310:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000314:	6013      	str	r3, [r2, #0]

	/*4.5. Select Memory to memory transfer */
	DMA2_Stream0->CR |= DMA_SxCR_DIR_1;
 8000316:	4b12      	ldr	r3, [pc, #72]	; (8000360 <DMA2_mem2mem_init+0xa4>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4a11      	ldr	r2, [pc, #68]	; (8000360 <DMA2_mem2mem_init+0xa4>)
 800031c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000320:	6013      	str	r3, [r2, #0]

	/*4.6. Enable transfer interrupt */
	DMA2_Stream0->CR |= DMA_SxCR_TCIE;
 8000322:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <DMA2_mem2mem_init+0xa4>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4a0e      	ldr	r2, [pc, #56]	; (8000360 <DMA2_mem2mem_init+0xa4>)
 8000328:	f043 0310 	orr.w	r3, r3, #16
 800032c:	6013      	str	r3, [r2, #0]

	/*4.7. */
	DMA2_Stream0->CR |= DMA_SxCR_TEIE;
 800032e:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <DMA2_mem2mem_init+0xa4>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4a0b      	ldr	r2, [pc, #44]	; (8000360 <DMA2_mem2mem_init+0xa4>)
 8000334:	f043 0304 	orr.w	r3, r3, #4
 8000338:	6013      	str	r3, [r2, #0]

	/*5. Disable direct mode */
	DMA2_Stream0->FCR |= DMA_SxFCR_DMDIS;
 800033a:	4b09      	ldr	r3, [pc, #36]	; (8000360 <DMA2_mem2mem_init+0xa4>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	4a08      	ldr	r2, [pc, #32]	; (8000360 <DMA2_mem2mem_init+0xa4>)
 8000340:	f043 0304 	orr.w	r3, r3, #4
 8000344:	6153      	str	r3, [r2, #20]

	/*6. Set DMA FIFO threshold */
	DMA2_Stream0->FCR |= DMA_SxFCR_FTH;
 8000346:	4b06      	ldr	r3, [pc, #24]	; (8000360 <DMA2_mem2mem_init+0xa4>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	4a05      	ldr	r2, [pc, #20]	; (8000360 <DMA2_mem2mem_init+0xa4>)
 800034c:	f043 0303 	orr.w	r3, r3, #3
 8000350:	6153      	str	r3, [r2, #20]

	/*7. Enable DMA interrupt in NVIC (nested vector interrupt controller) */
	NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000352:	2038      	movs	r0, #56	; 0x38
 8000354:	f7ff ff94 	bl	8000280 <__NVIC_EnableIRQ>

}
 8000358:	bf00      	nop
 800035a:	bd80      	pop	{r7, pc}
 800035c:	40023800 	.word	0x40023800
 8000360:	40026410 	.word	0x40026410

08000364 <DMA2_transfer_start>:

void DMA2_transfer_start(uint32_t src_buff, uint32_t dest_buff, uint32_t len){
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
 800036a:	60f8      	str	r0, [r7, #12]
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	607a      	str	r2, [r7, #4]
	/*1. Set peripheral address */
	DMA2_Stream0->PAR = src_buff;
 8000370:	4a0a      	ldr	r2, [pc, #40]	; (800039c <DMA2_transfer_start+0x38>)
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	6093      	str	r3, [r2, #8]

	/*2. Set memory address */
	DMA2_Stream0->M0AR = dest_buff;
 8000376:	4a09      	ldr	r2, [pc, #36]	; (800039c <DMA2_transfer_start+0x38>)
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	60d3      	str	r3, [r2, #12]

	/*3. Set transfer length */
	DMA2_Stream0->NDTR = len;
 800037c:	4a07      	ldr	r2, [pc, #28]	; (800039c <DMA2_transfer_start+0x38>)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	6053      	str	r3, [r2, #4]

	/*4. Enable dma stream. */
	DMA2_Stream0->CR |= DMA_SxCR_EN;
 8000382:	4b06      	ldr	r3, [pc, #24]	; (800039c <DMA2_transfer_start+0x38>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a05      	ldr	r2, [pc, #20]	; (800039c <DMA2_transfer_start+0x38>)
 8000388:	f043 0301 	orr.w	r3, r3, #1
 800038c:	6013      	str	r3, [r2, #0]

}
 800038e:	bf00      	nop
 8000390:	3714      	adds	r7, #20
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	40026410 	.word	0x40026410

080003a0 <main>:
uint16_t sensor_data_arr[BUFFER_SIZE] = {892,731,1234,90,23};
uint16_t temp_data_arr[BUFFER_SIZE];

volatile uint8_t g_transfer_complete;

int main(void){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0

	uart2_tx_init();
 80003a6:	f000 f93f 	bl	8000628 <uart2_tx_init>
	DMA2_mem2mem_init();
 80003aa:	f7ff ff87 	bl	80002bc <DMA2_mem2mem_init>
	DMA2_transfer_start((uint32_t)sensor_data_arr, (uint32_t)temp_data_arr, BUFFER_SIZE);
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <main+0x54>)
 80003b0:	4911      	ldr	r1, [pc, #68]	; (80003f8 <main+0x58>)
 80003b2:	2205      	movs	r2, #5
 80003b4:	4618      	mov	r0, r3
 80003b6:	f7ff ffd5 	bl	8000364 <DMA2_transfer_start>
	while(!(g_transfer_complete)){}
 80003ba:	bf00      	nop
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <main+0x5c>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d0fa      	beq.n	80003bc <main+0x1c>

	for(int i = 0; i < BUFFER_SIZE; i++){
 80003c6:	2300      	movs	r3, #0
 80003c8:	607b      	str	r3, [r7, #4]
 80003ca:	e00b      	b.n	80003e4 <main+0x44>
		printf("Temp buffer[%d]: %d\r\n", i, temp_data_arr[i]);
 80003cc:	4a0a      	ldr	r2, [pc, #40]	; (80003f8 <main+0x58>)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003d4:	461a      	mov	r2, r3
 80003d6:	6879      	ldr	r1, [r7, #4]
 80003d8:	4809      	ldr	r0, [pc, #36]	; (8000400 <main+0x60>)
 80003da:	f000 fa13 	bl	8000804 <iprintf>
	for(int i = 0; i < BUFFER_SIZE; i++){
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	3301      	adds	r3, #1
 80003e2:	607b      	str	r3, [r7, #4]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	2b04      	cmp	r3, #4
 80003e8:	ddf0      	ble.n	80003cc <main+0x2c>
	}
	g_transfer_complete = 0;
 80003ea:	4b04      	ldr	r3, [pc, #16]	; (80003fc <main+0x5c>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	701a      	strb	r2, [r3, #0]


	while(1){
 80003f0:	e7fe      	b.n	80003f0 <main+0x50>
 80003f2:	bf00      	nop
 80003f4:	20000000 	.word	0x20000000
 80003f8:	2000008c 	.word	0x2000008c
 80003fc:	20000096 	.word	0x20000096
 8000400:	08001738 	.word	0x08001738

08000404 <DMA2_Stream0_IRQHandler>:
	}


}

void DMA2_Stream0_IRQHandler(void){
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0

	/*1. Check if transfer complete interrupt occurred */
	if(DMA2->LISR & DMA_LISR_TCIF0){
 8000408:	4b0f      	ldr	r3, [pc, #60]	; (8000448 <DMA2_Stream0_IRQHandler+0x44>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	f003 0320 	and.w	r3, r3, #32
 8000410:	2b00      	cmp	r3, #0
 8000412:	d008      	beq.n	8000426 <DMA2_Stream0_IRQHandler+0x22>
		g_transfer_complete = 1;
 8000414:	4b0d      	ldr	r3, [pc, #52]	; (800044c <DMA2_Stream0_IRQHandler+0x48>)
 8000416:	2201      	movs	r2, #1
 8000418:	701a      	strb	r2, [r3, #0]
		DMA2->LIFCR |= DMA_LIFCR_CTCIF0;
 800041a:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <DMA2_Stream0_IRQHandler+0x44>)
 800041c:	689b      	ldr	r3, [r3, #8]
 800041e:	4a0a      	ldr	r2, [pc, #40]	; (8000448 <DMA2_Stream0_IRQHandler+0x44>)
 8000420:	f043 0320 	orr.w	r3, r3, #32
 8000424:	6093      	str	r3, [r2, #8]
	}

	/*2. Check if transfer error interrupt occurred. */
	if(DMA2->LISR & DMA_LISR_TEIF0){
 8000426:	4b08      	ldr	r3, [pc, #32]	; (8000448 <DMA2_Stream0_IRQHandler+0x44>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	f003 0308 	and.w	r3, r3, #8
 800042e:	2b00      	cmp	r3, #0
 8000430:	d005      	beq.n	800043e <DMA2_Stream0_IRQHandler+0x3a>

		/*3. Do something */

		/*4. Clear flag */
		DMA2->LIFCR |= DMA_LIFCR_CTEIF0;
 8000432:	4b05      	ldr	r3, [pc, #20]	; (8000448 <DMA2_Stream0_IRQHandler+0x44>)
 8000434:	689b      	ldr	r3, [r3, #8]
 8000436:	4a04      	ldr	r2, [pc, #16]	; (8000448 <DMA2_Stream0_IRQHandler+0x44>)
 8000438:	f043 0308 	orr.w	r3, r3, #8
 800043c:	6093      	str	r3, [r2, #8]

	}
}
 800043e:	bf00      	nop
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr
 8000448:	40026400 	.word	0x40026400
 800044c:	20000096 	.word	0x20000096

08000450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000454:	e7fe      	b.n	8000454 <NMI_Handler+0x4>

08000456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000456:	b480      	push	{r7}
 8000458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800045a:	e7fe      	b.n	800045a <HardFault_Handler+0x4>

0800045c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000460:	e7fe      	b.n	8000460 <MemManage_Handler+0x4>

08000462 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000462:	b480      	push	{r7}
 8000464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000466:	e7fe      	b.n	8000466 <BusFault_Handler+0x4>

08000468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800046c:	e7fe      	b.n	800046c <UsageFault_Handler+0x4>

0800046e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800046e:	b480      	push	{r7}
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr

0800047c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr

0800048a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800048e:	bf00      	nop
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr

08000498 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800049c:	f000 f96c 	bl	8000778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a0:	bf00      	nop
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b086      	sub	sp, #24
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	60f8      	str	r0, [r7, #12]
 80004ac:	60b9      	str	r1, [r7, #8]
 80004ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004b0:	2300      	movs	r3, #0
 80004b2:	617b      	str	r3, [r7, #20]
 80004b4:	e00a      	b.n	80004cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004b6:	f3af 8000 	nop.w
 80004ba:	4601      	mov	r1, r0
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	1c5a      	adds	r2, r3, #1
 80004c0:	60ba      	str	r2, [r7, #8]
 80004c2:	b2ca      	uxtb	r2, r1
 80004c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	3301      	adds	r3, #1
 80004ca:	617b      	str	r3, [r7, #20]
 80004cc:	697a      	ldr	r2, [r7, #20]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	dbf0      	blt.n	80004b6 <_read+0x12>
	}

return len;
 80004d4:	687b      	ldr	r3, [r7, #4]
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	3718      	adds	r7, #24
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}

080004de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004de:	b580      	push	{r7, lr}
 80004e0:	b086      	sub	sp, #24
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	60f8      	str	r0, [r7, #12]
 80004e6:	60b9      	str	r1, [r7, #8]
 80004e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ea:	2300      	movs	r3, #0
 80004ec:	617b      	str	r3, [r7, #20]
 80004ee:	e009      	b.n	8000504 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	1c5a      	adds	r2, r3, #1
 80004f4:	60ba      	str	r2, [r7, #8]
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 f889 	bl	8000610 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	3301      	adds	r3, #1
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	697a      	ldr	r2, [r7, #20]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	429a      	cmp	r2, r3
 800050a:	dbf1      	blt.n	80004f0 <_write+0x12>
	}
	return len;
 800050c:	687b      	ldr	r3, [r7, #4]
}
 800050e:	4618      	mov	r0, r3
 8000510:	3718      	adds	r7, #24
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <_close>:

int _close(int file)
{
 8000516:	b480      	push	{r7}
 8000518:	b083      	sub	sp, #12
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
	return -1;
 800051e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000522:	4618      	mov	r0, r3
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr

0800052e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800052e:	b480      	push	{r7}
 8000530:	b083      	sub	sp, #12
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
 8000536:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800053e:	605a      	str	r2, [r3, #4]
	return 0;
 8000540:	2300      	movs	r3, #0
}
 8000542:	4618      	mov	r0, r3
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr

0800054e <_isatty>:

int _isatty(int file)
{
 800054e:	b480      	push	{r7}
 8000550:	b083      	sub	sp, #12
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
	return 1;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
 800056a:	60f8      	str	r0, [r7, #12]
 800056c:	60b9      	str	r1, [r7, #8]
 800056e:	607a      	str	r2, [r7, #4]
	return 0;
 8000570:	2300      	movs	r3, #0
}
 8000572:	4618      	mov	r0, r3
 8000574:	3714      	adds	r7, #20
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
	...

08000580 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000588:	4a14      	ldr	r2, [pc, #80]	; (80005dc <_sbrk+0x5c>)
 800058a:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <_sbrk+0x60>)
 800058c:	1ad3      	subs	r3, r2, r3
 800058e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000594:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <_sbrk+0x64>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d102      	bne.n	80005a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800059c:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <_sbrk+0x64>)
 800059e:	4a12      	ldr	r2, [pc, #72]	; (80005e8 <_sbrk+0x68>)
 80005a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005a2:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <_sbrk+0x64>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4413      	add	r3, r2
 80005aa:	693a      	ldr	r2, [r7, #16]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d207      	bcs.n	80005c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005b0:	f000 f8f6 	bl	80007a0 <__errno>
 80005b4:	4603      	mov	r3, r0
 80005b6:	220c      	movs	r2, #12
 80005b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295
 80005be:	e009      	b.n	80005d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <_sbrk+0x64>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005c6:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <_sbrk+0x64>)
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4413      	add	r3, r2
 80005ce:	4a05      	ldr	r2, [pc, #20]	; (80005e4 <_sbrk+0x64>)
 80005d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005d2:	68fb      	ldr	r3, [r7, #12]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3718      	adds	r7, #24
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20020000 	.word	0x20020000
 80005e0:	00000400 	.word	0x00000400
 80005e4:	20000098 	.word	0x20000098
 80005e8:	200000b0 	.word	0x200000b0

080005ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <SystemInit+0x20>)
 80005f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005f6:	4a05      	ldr	r2, [pc, #20]	; (800060c <SystemInit+0x20>)
 80005f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__io_putchar>:

static uint16_t compute_uart_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart_set_baudarate(uint32_t periph_clk, uint32_t baudrate);
static void uart2_write(int ch);

int __io_putchar(int ch){
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]

	uart2_write(ch);
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f000 f843 	bl	80006a4 <uart2_write>
	return ch;
 800061e:	687b      	ldr	r3, [r7, #4]

}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <uart2_tx_init>:
void uart2_tx_init(void){
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0

	/*1. Set clock access to GPIOA*/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800062c:	4b19      	ldr	r3, [pc, #100]	; (8000694 <uart2_tx_init+0x6c>)
 800062e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000630:	4a18      	ldr	r2, [pc, #96]	; (8000694 <uart2_tx_init+0x6c>)
 8000632:	f043 0301 	orr.w	r3, r3, #1
 8000636:	6313      	str	r3, [r2, #48]	; 0x30

	/*2. Set PA2 mode to alternate function */
	GPIOA->MODER |= GPIO_MODER_MODE2_1;
 8000638:	4b17      	ldr	r3, [pc, #92]	; (8000698 <uart2_tx_init+0x70>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a16      	ldr	r2, [pc, #88]	; (8000698 <uart2_tx_init+0x70>)
 800063e:	f043 0320 	orr.w	r3, r3, #32
 8000642:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~GPIO_MODER_MODE2_0;
 8000644:	4b14      	ldr	r3, [pc, #80]	; (8000698 <uart2_tx_init+0x70>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a13      	ldr	r2, [pc, #76]	; (8000698 <uart2_tx_init+0x70>)
 800064a:	f023 0310 	bic.w	r3, r3, #16
 800064e:	6013      	str	r3, [r2, #0]

	/*3. Set PA2 alternate function type to AF7 (UART2_TX) */
	GPIOA->AFR[0] |= GPIO_AFRL_AFRL2_0 | GPIO_AFRL_AFRL2_1 | GPIO_AFRL_AFRL2_2;
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <uart2_tx_init+0x70>)
 8000652:	6a1b      	ldr	r3, [r3, #32]
 8000654:	4a10      	ldr	r2, [pc, #64]	; (8000698 <uart2_tx_init+0x70>)
 8000656:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800065a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~GPIO_AFRL_AFRL2_3;
 800065c:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <uart2_tx_init+0x70>)
 800065e:	6a1b      	ldr	r3, [r3, #32]
 8000660:	4a0d      	ldr	r2, [pc, #52]	; (8000698 <uart2_tx_init+0x70>)
 8000662:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000666:	6213      	str	r3, [r2, #32]

	/*4. Enable clock access to UART2 */
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000668:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <uart2_tx_init+0x6c>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	4a09      	ldr	r2, [pc, #36]	; (8000694 <uart2_tx_init+0x6c>)
 800066e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000672:	6413      	str	r3, [r2, #64]	; 0x40

	/*5. Set baudrate */
	uart_set_baudarate(CLK, UART_BAUDRATE);
 8000674:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000678:	4808      	ldr	r0, [pc, #32]	; (800069c <uart2_tx_init+0x74>)
 800067a:	f000 f83f 	bl	80006fc <uart_set_baudarate>

	/*6. Set transfer direction */
	USART2->CR1 = USART_CR1_TE;
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <uart2_tx_init+0x78>)
 8000680:	2208      	movs	r2, #8
 8000682:	60da      	str	r2, [r3, #12]

	/*7. Enable UART Module */
	USART2->CR1 |= USART_CR1_UE;
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <uart2_tx_init+0x78>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	4a05      	ldr	r2, [pc, #20]	; (80006a0 <uart2_tx_init+0x78>)
 800068a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800068e:	60d3      	str	r3, [r2, #12]

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40023800 	.word	0x40023800
 8000698:	40020000 	.word	0x40020000
 800069c:	00f42400 	.word	0x00f42400
 80006a0:	40004400 	.word	0x40004400

080006a4 <uart2_write>:
static void uart2_write(int ch){
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]

	/*1. Make sure the transmit data register is empty*/
	while(!(USART2->SR & USART_SR_TXE)){}
 80006ac:	bf00      	nop
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <uart2_write+0x2c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d0f9      	beq.n	80006ae <uart2_write+0xa>

	/*2. Once we know its empty, write to transmit data register. */
	USART2->DR = (ch & 0xFF);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4a04      	ldr	r2, [pc, #16]	; (80006d0 <uart2_write+0x2c>)
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	6053      	str	r3, [r2, #4]
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	40004400 	.word	0x40004400

080006d4 <compute_uart_baudrate>:

static uint16_t compute_uart_baudrate(uint32_t periph_clk, uint32_t baudrate){
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	6039      	str	r1, [r7, #0]
	return ((periph_clk + (baudrate / 2U)) / baudrate);
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	085a      	lsrs	r2, r3, #1
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	441a      	add	r2, r3
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ec:	b29b      	uxth	r3, r3
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
	...

080006fc <uart_set_baudarate>:
static void uart_set_baudarate(uint32_t periph_clk, uint32_t baudrate){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_baudrate(periph_clk, baudrate);
 8000706:	6839      	ldr	r1, [r7, #0]
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f7ff ffe3 	bl	80006d4 <compute_uart_baudrate>
 800070e:	4603      	mov	r3, r0
 8000710:	461a      	mov	r2, r3
 8000712:	4b03      	ldr	r3, [pc, #12]	; (8000720 <uart_set_baudarate+0x24>)
 8000714:	609a      	str	r2, [r3, #8]
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40004400 	.word	0x40004400

08000724 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000724:	f8df d034 	ldr.w	sp, [pc, #52]	; 800075c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000728:	480d      	ldr	r0, [pc, #52]	; (8000760 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800072a:	490e      	ldr	r1, [pc, #56]	; (8000764 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800072c:	4a0e      	ldr	r2, [pc, #56]	; (8000768 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000730:	e002      	b.n	8000738 <LoopCopyDataInit>

08000732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000736:	3304      	adds	r3, #4

08000738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800073a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800073c:	d3f9      	bcc.n	8000732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800073e:	4a0b      	ldr	r2, [pc, #44]	; (800076c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000740:	4c0b      	ldr	r4, [pc, #44]	; (8000770 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000744:	e001      	b.n	800074a <LoopFillZerobss>

08000746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000748:	3204      	adds	r2, #4

0800074a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800074a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800074c:	d3fb      	bcc.n	8000746 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800074e:	f7ff ff4d 	bl	80005ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000752:	f000 f82b 	bl	80007ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000756:	f7ff fe23 	bl	80003a0 <main>
  bx  lr    
 800075a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800075c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000764:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000768:	080017f0 	.word	0x080017f0
  ldr r2, =_sbss
 800076c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000770:	200000b0 	.word	0x200000b0

08000774 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000774:	e7fe      	b.n	8000774 <ADC_IRQHandler>
	...

08000778 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <HAL_IncTick+0x20>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	461a      	mov	r2, r3
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <HAL_IncTick+0x24>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4413      	add	r3, r2
 8000788:	4a04      	ldr	r2, [pc, #16]	; (800079c <HAL_IncTick+0x24>)
 800078a:	6013      	str	r3, [r2, #0]
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	2000000a 	.word	0x2000000a
 800079c:	2000009c 	.word	0x2000009c

080007a0 <__errno>:
 80007a0:	4b01      	ldr	r3, [pc, #4]	; (80007a8 <__errno+0x8>)
 80007a2:	6818      	ldr	r0, [r3, #0]
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	2000000c 	.word	0x2000000c

080007ac <__libc_init_array>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	4d0d      	ldr	r5, [pc, #52]	; (80007e4 <__libc_init_array+0x38>)
 80007b0:	4c0d      	ldr	r4, [pc, #52]	; (80007e8 <__libc_init_array+0x3c>)
 80007b2:	1b64      	subs	r4, r4, r5
 80007b4:	10a4      	asrs	r4, r4, #2
 80007b6:	2600      	movs	r6, #0
 80007b8:	42a6      	cmp	r6, r4
 80007ba:	d109      	bne.n	80007d0 <__libc_init_array+0x24>
 80007bc:	4d0b      	ldr	r5, [pc, #44]	; (80007ec <__libc_init_array+0x40>)
 80007be:	4c0c      	ldr	r4, [pc, #48]	; (80007f0 <__libc_init_array+0x44>)
 80007c0:	f000 ffae 	bl	8001720 <_init>
 80007c4:	1b64      	subs	r4, r4, r5
 80007c6:	10a4      	asrs	r4, r4, #2
 80007c8:	2600      	movs	r6, #0
 80007ca:	42a6      	cmp	r6, r4
 80007cc:	d105      	bne.n	80007da <__libc_init_array+0x2e>
 80007ce:	bd70      	pop	{r4, r5, r6, pc}
 80007d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80007d4:	4798      	blx	r3
 80007d6:	3601      	adds	r6, #1
 80007d8:	e7ee      	b.n	80007b8 <__libc_init_array+0xc>
 80007da:	f855 3b04 	ldr.w	r3, [r5], #4
 80007de:	4798      	blx	r3
 80007e0:	3601      	adds	r6, #1
 80007e2:	e7f2      	b.n	80007ca <__libc_init_array+0x1e>
 80007e4:	080017e8 	.word	0x080017e8
 80007e8:	080017e8 	.word	0x080017e8
 80007ec:	080017e8 	.word	0x080017e8
 80007f0:	080017ec 	.word	0x080017ec

080007f4 <memset>:
 80007f4:	4402      	add	r2, r0
 80007f6:	4603      	mov	r3, r0
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d100      	bne.n	80007fe <memset+0xa>
 80007fc:	4770      	bx	lr
 80007fe:	f803 1b01 	strb.w	r1, [r3], #1
 8000802:	e7f9      	b.n	80007f8 <memset+0x4>

08000804 <iprintf>:
 8000804:	b40f      	push	{r0, r1, r2, r3}
 8000806:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <iprintf+0x2c>)
 8000808:	b513      	push	{r0, r1, r4, lr}
 800080a:	681c      	ldr	r4, [r3, #0]
 800080c:	b124      	cbz	r4, 8000818 <iprintf+0x14>
 800080e:	69a3      	ldr	r3, [r4, #24]
 8000810:	b913      	cbnz	r3, 8000818 <iprintf+0x14>
 8000812:	4620      	mov	r0, r4
 8000814:	f000 f866 	bl	80008e4 <__sinit>
 8000818:	ab05      	add	r3, sp, #20
 800081a:	9a04      	ldr	r2, [sp, #16]
 800081c:	68a1      	ldr	r1, [r4, #8]
 800081e:	9301      	str	r3, [sp, #4]
 8000820:	4620      	mov	r0, r4
 8000822:	f000 f9bd 	bl	8000ba0 <_vfiprintf_r>
 8000826:	b002      	add	sp, #8
 8000828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800082c:	b004      	add	sp, #16
 800082e:	4770      	bx	lr
 8000830:	2000000c 	.word	0x2000000c

08000834 <std>:
 8000834:	2300      	movs	r3, #0
 8000836:	b510      	push	{r4, lr}
 8000838:	4604      	mov	r4, r0
 800083a:	e9c0 3300 	strd	r3, r3, [r0]
 800083e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000842:	6083      	str	r3, [r0, #8]
 8000844:	8181      	strh	r1, [r0, #12]
 8000846:	6643      	str	r3, [r0, #100]	; 0x64
 8000848:	81c2      	strh	r2, [r0, #14]
 800084a:	6183      	str	r3, [r0, #24]
 800084c:	4619      	mov	r1, r3
 800084e:	2208      	movs	r2, #8
 8000850:	305c      	adds	r0, #92	; 0x5c
 8000852:	f7ff ffcf 	bl	80007f4 <memset>
 8000856:	4b05      	ldr	r3, [pc, #20]	; (800086c <std+0x38>)
 8000858:	6263      	str	r3, [r4, #36]	; 0x24
 800085a:	4b05      	ldr	r3, [pc, #20]	; (8000870 <std+0x3c>)
 800085c:	62a3      	str	r3, [r4, #40]	; 0x28
 800085e:	4b05      	ldr	r3, [pc, #20]	; (8000874 <std+0x40>)
 8000860:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000862:	4b05      	ldr	r3, [pc, #20]	; (8000878 <std+0x44>)
 8000864:	6224      	str	r4, [r4, #32]
 8000866:	6323      	str	r3, [r4, #48]	; 0x30
 8000868:	bd10      	pop	{r4, pc}
 800086a:	bf00      	nop
 800086c:	08001149 	.word	0x08001149
 8000870:	0800116b 	.word	0x0800116b
 8000874:	080011a3 	.word	0x080011a3
 8000878:	080011c7 	.word	0x080011c7

0800087c <_cleanup_r>:
 800087c:	4901      	ldr	r1, [pc, #4]	; (8000884 <_cleanup_r+0x8>)
 800087e:	f000 b8af 	b.w	80009e0 <_fwalk_reent>
 8000882:	bf00      	nop
 8000884:	080014a1 	.word	0x080014a1

08000888 <__sfmoreglue>:
 8000888:	b570      	push	{r4, r5, r6, lr}
 800088a:	2268      	movs	r2, #104	; 0x68
 800088c:	1e4d      	subs	r5, r1, #1
 800088e:	4355      	muls	r5, r2
 8000890:	460e      	mov	r6, r1
 8000892:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000896:	f000 f8e5 	bl	8000a64 <_malloc_r>
 800089a:	4604      	mov	r4, r0
 800089c:	b140      	cbz	r0, 80008b0 <__sfmoreglue+0x28>
 800089e:	2100      	movs	r1, #0
 80008a0:	e9c0 1600 	strd	r1, r6, [r0]
 80008a4:	300c      	adds	r0, #12
 80008a6:	60a0      	str	r0, [r4, #8]
 80008a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80008ac:	f7ff ffa2 	bl	80007f4 <memset>
 80008b0:	4620      	mov	r0, r4
 80008b2:	bd70      	pop	{r4, r5, r6, pc}

080008b4 <__sfp_lock_acquire>:
 80008b4:	4801      	ldr	r0, [pc, #4]	; (80008bc <__sfp_lock_acquire+0x8>)
 80008b6:	f000 b8b3 	b.w	8000a20 <__retarget_lock_acquire_recursive>
 80008ba:	bf00      	nop
 80008bc:	200000a1 	.word	0x200000a1

080008c0 <__sfp_lock_release>:
 80008c0:	4801      	ldr	r0, [pc, #4]	; (80008c8 <__sfp_lock_release+0x8>)
 80008c2:	f000 b8ae 	b.w	8000a22 <__retarget_lock_release_recursive>
 80008c6:	bf00      	nop
 80008c8:	200000a1 	.word	0x200000a1

080008cc <__sinit_lock_acquire>:
 80008cc:	4801      	ldr	r0, [pc, #4]	; (80008d4 <__sinit_lock_acquire+0x8>)
 80008ce:	f000 b8a7 	b.w	8000a20 <__retarget_lock_acquire_recursive>
 80008d2:	bf00      	nop
 80008d4:	200000a2 	.word	0x200000a2

080008d8 <__sinit_lock_release>:
 80008d8:	4801      	ldr	r0, [pc, #4]	; (80008e0 <__sinit_lock_release+0x8>)
 80008da:	f000 b8a2 	b.w	8000a22 <__retarget_lock_release_recursive>
 80008de:	bf00      	nop
 80008e0:	200000a2 	.word	0x200000a2

080008e4 <__sinit>:
 80008e4:	b510      	push	{r4, lr}
 80008e6:	4604      	mov	r4, r0
 80008e8:	f7ff fff0 	bl	80008cc <__sinit_lock_acquire>
 80008ec:	69a3      	ldr	r3, [r4, #24]
 80008ee:	b11b      	cbz	r3, 80008f8 <__sinit+0x14>
 80008f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008f4:	f7ff bff0 	b.w	80008d8 <__sinit_lock_release>
 80008f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80008fc:	6523      	str	r3, [r4, #80]	; 0x50
 80008fe:	4b13      	ldr	r3, [pc, #76]	; (800094c <__sinit+0x68>)
 8000900:	4a13      	ldr	r2, [pc, #76]	; (8000950 <__sinit+0x6c>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	62a2      	str	r2, [r4, #40]	; 0x28
 8000906:	42a3      	cmp	r3, r4
 8000908:	bf04      	itt	eq
 800090a:	2301      	moveq	r3, #1
 800090c:	61a3      	streq	r3, [r4, #24]
 800090e:	4620      	mov	r0, r4
 8000910:	f000 f820 	bl	8000954 <__sfp>
 8000914:	6060      	str	r0, [r4, #4]
 8000916:	4620      	mov	r0, r4
 8000918:	f000 f81c 	bl	8000954 <__sfp>
 800091c:	60a0      	str	r0, [r4, #8]
 800091e:	4620      	mov	r0, r4
 8000920:	f000 f818 	bl	8000954 <__sfp>
 8000924:	2200      	movs	r2, #0
 8000926:	60e0      	str	r0, [r4, #12]
 8000928:	2104      	movs	r1, #4
 800092a:	6860      	ldr	r0, [r4, #4]
 800092c:	f7ff ff82 	bl	8000834 <std>
 8000930:	68a0      	ldr	r0, [r4, #8]
 8000932:	2201      	movs	r2, #1
 8000934:	2109      	movs	r1, #9
 8000936:	f7ff ff7d 	bl	8000834 <std>
 800093a:	68e0      	ldr	r0, [r4, #12]
 800093c:	2202      	movs	r2, #2
 800093e:	2112      	movs	r1, #18
 8000940:	f7ff ff78 	bl	8000834 <std>
 8000944:	2301      	movs	r3, #1
 8000946:	61a3      	str	r3, [r4, #24]
 8000948:	e7d2      	b.n	80008f0 <__sinit+0xc>
 800094a:	bf00      	nop
 800094c:	08001750 	.word	0x08001750
 8000950:	0800087d 	.word	0x0800087d

08000954 <__sfp>:
 8000954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000956:	4607      	mov	r7, r0
 8000958:	f7ff ffac 	bl	80008b4 <__sfp_lock_acquire>
 800095c:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <__sfp+0x84>)
 800095e:	681e      	ldr	r6, [r3, #0]
 8000960:	69b3      	ldr	r3, [r6, #24]
 8000962:	b913      	cbnz	r3, 800096a <__sfp+0x16>
 8000964:	4630      	mov	r0, r6
 8000966:	f7ff ffbd 	bl	80008e4 <__sinit>
 800096a:	3648      	adds	r6, #72	; 0x48
 800096c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000970:	3b01      	subs	r3, #1
 8000972:	d503      	bpl.n	800097c <__sfp+0x28>
 8000974:	6833      	ldr	r3, [r6, #0]
 8000976:	b30b      	cbz	r3, 80009bc <__sfp+0x68>
 8000978:	6836      	ldr	r6, [r6, #0]
 800097a:	e7f7      	b.n	800096c <__sfp+0x18>
 800097c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000980:	b9d5      	cbnz	r5, 80009b8 <__sfp+0x64>
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <__sfp+0x88>)
 8000984:	60e3      	str	r3, [r4, #12]
 8000986:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800098a:	6665      	str	r5, [r4, #100]	; 0x64
 800098c:	f000 f847 	bl	8000a1e <__retarget_lock_init_recursive>
 8000990:	f7ff ff96 	bl	80008c0 <__sfp_lock_release>
 8000994:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000998:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800099c:	6025      	str	r5, [r4, #0]
 800099e:	61a5      	str	r5, [r4, #24]
 80009a0:	2208      	movs	r2, #8
 80009a2:	4629      	mov	r1, r5
 80009a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80009a8:	f7ff ff24 	bl	80007f4 <memset>
 80009ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80009b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80009b4:	4620      	mov	r0, r4
 80009b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009b8:	3468      	adds	r4, #104	; 0x68
 80009ba:	e7d9      	b.n	8000970 <__sfp+0x1c>
 80009bc:	2104      	movs	r1, #4
 80009be:	4638      	mov	r0, r7
 80009c0:	f7ff ff62 	bl	8000888 <__sfmoreglue>
 80009c4:	4604      	mov	r4, r0
 80009c6:	6030      	str	r0, [r6, #0]
 80009c8:	2800      	cmp	r0, #0
 80009ca:	d1d5      	bne.n	8000978 <__sfp+0x24>
 80009cc:	f7ff ff78 	bl	80008c0 <__sfp_lock_release>
 80009d0:	230c      	movs	r3, #12
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	e7ee      	b.n	80009b4 <__sfp+0x60>
 80009d6:	bf00      	nop
 80009d8:	08001750 	.word	0x08001750
 80009dc:	ffff0001 	.word	0xffff0001

080009e0 <_fwalk_reent>:
 80009e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009e4:	4606      	mov	r6, r0
 80009e6:	4688      	mov	r8, r1
 80009e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80009ec:	2700      	movs	r7, #0
 80009ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80009f2:	f1b9 0901 	subs.w	r9, r9, #1
 80009f6:	d505      	bpl.n	8000a04 <_fwalk_reent+0x24>
 80009f8:	6824      	ldr	r4, [r4, #0]
 80009fa:	2c00      	cmp	r4, #0
 80009fc:	d1f7      	bne.n	80009ee <_fwalk_reent+0xe>
 80009fe:	4638      	mov	r0, r7
 8000a00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a04:	89ab      	ldrh	r3, [r5, #12]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d907      	bls.n	8000a1a <_fwalk_reent+0x3a>
 8000a0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	d003      	beq.n	8000a1a <_fwalk_reent+0x3a>
 8000a12:	4629      	mov	r1, r5
 8000a14:	4630      	mov	r0, r6
 8000a16:	47c0      	blx	r8
 8000a18:	4307      	orrs	r7, r0
 8000a1a:	3568      	adds	r5, #104	; 0x68
 8000a1c:	e7e9      	b.n	80009f2 <_fwalk_reent+0x12>

08000a1e <__retarget_lock_init_recursive>:
 8000a1e:	4770      	bx	lr

08000a20 <__retarget_lock_acquire_recursive>:
 8000a20:	4770      	bx	lr

08000a22 <__retarget_lock_release_recursive>:
 8000a22:	4770      	bx	lr

08000a24 <sbrk_aligned>:
 8000a24:	b570      	push	{r4, r5, r6, lr}
 8000a26:	4e0e      	ldr	r6, [pc, #56]	; (8000a60 <sbrk_aligned+0x3c>)
 8000a28:	460c      	mov	r4, r1
 8000a2a:	6831      	ldr	r1, [r6, #0]
 8000a2c:	4605      	mov	r5, r0
 8000a2e:	b911      	cbnz	r1, 8000a36 <sbrk_aligned+0x12>
 8000a30:	f000 fb7a 	bl	8001128 <_sbrk_r>
 8000a34:	6030      	str	r0, [r6, #0]
 8000a36:	4621      	mov	r1, r4
 8000a38:	4628      	mov	r0, r5
 8000a3a:	f000 fb75 	bl	8001128 <_sbrk_r>
 8000a3e:	1c43      	adds	r3, r0, #1
 8000a40:	d00a      	beq.n	8000a58 <sbrk_aligned+0x34>
 8000a42:	1cc4      	adds	r4, r0, #3
 8000a44:	f024 0403 	bic.w	r4, r4, #3
 8000a48:	42a0      	cmp	r0, r4
 8000a4a:	d007      	beq.n	8000a5c <sbrk_aligned+0x38>
 8000a4c:	1a21      	subs	r1, r4, r0
 8000a4e:	4628      	mov	r0, r5
 8000a50:	f000 fb6a 	bl	8001128 <_sbrk_r>
 8000a54:	3001      	adds	r0, #1
 8000a56:	d101      	bne.n	8000a5c <sbrk_aligned+0x38>
 8000a58:	f04f 34ff 	mov.w	r4, #4294967295
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	bd70      	pop	{r4, r5, r6, pc}
 8000a60:	200000a8 	.word	0x200000a8

08000a64 <_malloc_r>:
 8000a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a68:	1ccd      	adds	r5, r1, #3
 8000a6a:	f025 0503 	bic.w	r5, r5, #3
 8000a6e:	3508      	adds	r5, #8
 8000a70:	2d0c      	cmp	r5, #12
 8000a72:	bf38      	it	cc
 8000a74:	250c      	movcc	r5, #12
 8000a76:	2d00      	cmp	r5, #0
 8000a78:	4607      	mov	r7, r0
 8000a7a:	db01      	blt.n	8000a80 <_malloc_r+0x1c>
 8000a7c:	42a9      	cmp	r1, r5
 8000a7e:	d905      	bls.n	8000a8c <_malloc_r+0x28>
 8000a80:	230c      	movs	r3, #12
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	2600      	movs	r6, #0
 8000a86:	4630      	mov	r0, r6
 8000a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a8c:	4e2e      	ldr	r6, [pc, #184]	; (8000b48 <_malloc_r+0xe4>)
 8000a8e:	f000 fdbb 	bl	8001608 <__malloc_lock>
 8000a92:	6833      	ldr	r3, [r6, #0]
 8000a94:	461c      	mov	r4, r3
 8000a96:	bb34      	cbnz	r4, 8000ae6 <_malloc_r+0x82>
 8000a98:	4629      	mov	r1, r5
 8000a9a:	4638      	mov	r0, r7
 8000a9c:	f7ff ffc2 	bl	8000a24 <sbrk_aligned>
 8000aa0:	1c43      	adds	r3, r0, #1
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	d14d      	bne.n	8000b42 <_malloc_r+0xde>
 8000aa6:	6834      	ldr	r4, [r6, #0]
 8000aa8:	4626      	mov	r6, r4
 8000aaa:	2e00      	cmp	r6, #0
 8000aac:	d140      	bne.n	8000b30 <_malloc_r+0xcc>
 8000aae:	6823      	ldr	r3, [r4, #0]
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	4638      	mov	r0, r7
 8000ab4:	eb04 0803 	add.w	r8, r4, r3
 8000ab8:	f000 fb36 	bl	8001128 <_sbrk_r>
 8000abc:	4580      	cmp	r8, r0
 8000abe:	d13a      	bne.n	8000b36 <_malloc_r+0xd2>
 8000ac0:	6821      	ldr	r1, [r4, #0]
 8000ac2:	3503      	adds	r5, #3
 8000ac4:	1a6d      	subs	r5, r5, r1
 8000ac6:	f025 0503 	bic.w	r5, r5, #3
 8000aca:	3508      	adds	r5, #8
 8000acc:	2d0c      	cmp	r5, #12
 8000ace:	bf38      	it	cc
 8000ad0:	250c      	movcc	r5, #12
 8000ad2:	4629      	mov	r1, r5
 8000ad4:	4638      	mov	r0, r7
 8000ad6:	f7ff ffa5 	bl	8000a24 <sbrk_aligned>
 8000ada:	3001      	adds	r0, #1
 8000adc:	d02b      	beq.n	8000b36 <_malloc_r+0xd2>
 8000ade:	6823      	ldr	r3, [r4, #0]
 8000ae0:	442b      	add	r3, r5
 8000ae2:	6023      	str	r3, [r4, #0]
 8000ae4:	e00e      	b.n	8000b04 <_malloc_r+0xa0>
 8000ae6:	6822      	ldr	r2, [r4, #0]
 8000ae8:	1b52      	subs	r2, r2, r5
 8000aea:	d41e      	bmi.n	8000b2a <_malloc_r+0xc6>
 8000aec:	2a0b      	cmp	r2, #11
 8000aee:	d916      	bls.n	8000b1e <_malloc_r+0xba>
 8000af0:	1961      	adds	r1, r4, r5
 8000af2:	42a3      	cmp	r3, r4
 8000af4:	6025      	str	r5, [r4, #0]
 8000af6:	bf18      	it	ne
 8000af8:	6059      	strne	r1, [r3, #4]
 8000afa:	6863      	ldr	r3, [r4, #4]
 8000afc:	bf08      	it	eq
 8000afe:	6031      	streq	r1, [r6, #0]
 8000b00:	5162      	str	r2, [r4, r5]
 8000b02:	604b      	str	r3, [r1, #4]
 8000b04:	4638      	mov	r0, r7
 8000b06:	f104 060b 	add.w	r6, r4, #11
 8000b0a:	f000 fd83 	bl	8001614 <__malloc_unlock>
 8000b0e:	f026 0607 	bic.w	r6, r6, #7
 8000b12:	1d23      	adds	r3, r4, #4
 8000b14:	1af2      	subs	r2, r6, r3
 8000b16:	d0b6      	beq.n	8000a86 <_malloc_r+0x22>
 8000b18:	1b9b      	subs	r3, r3, r6
 8000b1a:	50a3      	str	r3, [r4, r2]
 8000b1c:	e7b3      	b.n	8000a86 <_malloc_r+0x22>
 8000b1e:	6862      	ldr	r2, [r4, #4]
 8000b20:	42a3      	cmp	r3, r4
 8000b22:	bf0c      	ite	eq
 8000b24:	6032      	streq	r2, [r6, #0]
 8000b26:	605a      	strne	r2, [r3, #4]
 8000b28:	e7ec      	b.n	8000b04 <_malloc_r+0xa0>
 8000b2a:	4623      	mov	r3, r4
 8000b2c:	6864      	ldr	r4, [r4, #4]
 8000b2e:	e7b2      	b.n	8000a96 <_malloc_r+0x32>
 8000b30:	4634      	mov	r4, r6
 8000b32:	6876      	ldr	r6, [r6, #4]
 8000b34:	e7b9      	b.n	8000aaa <_malloc_r+0x46>
 8000b36:	230c      	movs	r3, #12
 8000b38:	603b      	str	r3, [r7, #0]
 8000b3a:	4638      	mov	r0, r7
 8000b3c:	f000 fd6a 	bl	8001614 <__malloc_unlock>
 8000b40:	e7a1      	b.n	8000a86 <_malloc_r+0x22>
 8000b42:	6025      	str	r5, [r4, #0]
 8000b44:	e7de      	b.n	8000b04 <_malloc_r+0xa0>
 8000b46:	bf00      	nop
 8000b48:	200000a4 	.word	0x200000a4

08000b4c <__sfputc_r>:
 8000b4c:	6893      	ldr	r3, [r2, #8]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	b410      	push	{r4}
 8000b54:	6093      	str	r3, [r2, #8]
 8000b56:	da08      	bge.n	8000b6a <__sfputc_r+0x1e>
 8000b58:	6994      	ldr	r4, [r2, #24]
 8000b5a:	42a3      	cmp	r3, r4
 8000b5c:	db01      	blt.n	8000b62 <__sfputc_r+0x16>
 8000b5e:	290a      	cmp	r1, #10
 8000b60:	d103      	bne.n	8000b6a <__sfputc_r+0x1e>
 8000b62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b66:	f000 bb33 	b.w	80011d0 <__swbuf_r>
 8000b6a:	6813      	ldr	r3, [r2, #0]
 8000b6c:	1c58      	adds	r0, r3, #1
 8000b6e:	6010      	str	r0, [r2, #0]
 8000b70:	7019      	strb	r1, [r3, #0]
 8000b72:	4608      	mov	r0, r1
 8000b74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <__sfputs_r>:
 8000b7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b7c:	4606      	mov	r6, r0
 8000b7e:	460f      	mov	r7, r1
 8000b80:	4614      	mov	r4, r2
 8000b82:	18d5      	adds	r5, r2, r3
 8000b84:	42ac      	cmp	r4, r5
 8000b86:	d101      	bne.n	8000b8c <__sfputs_r+0x12>
 8000b88:	2000      	movs	r0, #0
 8000b8a:	e007      	b.n	8000b9c <__sfputs_r+0x22>
 8000b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b90:	463a      	mov	r2, r7
 8000b92:	4630      	mov	r0, r6
 8000b94:	f7ff ffda 	bl	8000b4c <__sfputc_r>
 8000b98:	1c43      	adds	r3, r0, #1
 8000b9a:	d1f3      	bne.n	8000b84 <__sfputs_r+0xa>
 8000b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000ba0 <_vfiprintf_r>:
 8000ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ba4:	460d      	mov	r5, r1
 8000ba6:	b09d      	sub	sp, #116	; 0x74
 8000ba8:	4614      	mov	r4, r2
 8000baa:	4698      	mov	r8, r3
 8000bac:	4606      	mov	r6, r0
 8000bae:	b118      	cbz	r0, 8000bb8 <_vfiprintf_r+0x18>
 8000bb0:	6983      	ldr	r3, [r0, #24]
 8000bb2:	b90b      	cbnz	r3, 8000bb8 <_vfiprintf_r+0x18>
 8000bb4:	f7ff fe96 	bl	80008e4 <__sinit>
 8000bb8:	4b89      	ldr	r3, [pc, #548]	; (8000de0 <_vfiprintf_r+0x240>)
 8000bba:	429d      	cmp	r5, r3
 8000bbc:	d11b      	bne.n	8000bf6 <_vfiprintf_r+0x56>
 8000bbe:	6875      	ldr	r5, [r6, #4]
 8000bc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000bc2:	07d9      	lsls	r1, r3, #31
 8000bc4:	d405      	bmi.n	8000bd2 <_vfiprintf_r+0x32>
 8000bc6:	89ab      	ldrh	r3, [r5, #12]
 8000bc8:	059a      	lsls	r2, r3, #22
 8000bca:	d402      	bmi.n	8000bd2 <_vfiprintf_r+0x32>
 8000bcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000bce:	f7ff ff27 	bl	8000a20 <__retarget_lock_acquire_recursive>
 8000bd2:	89ab      	ldrh	r3, [r5, #12]
 8000bd4:	071b      	lsls	r3, r3, #28
 8000bd6:	d501      	bpl.n	8000bdc <_vfiprintf_r+0x3c>
 8000bd8:	692b      	ldr	r3, [r5, #16]
 8000bda:	b9eb      	cbnz	r3, 8000c18 <_vfiprintf_r+0x78>
 8000bdc:	4629      	mov	r1, r5
 8000bde:	4630      	mov	r0, r6
 8000be0:	f000 fb5a 	bl	8001298 <__swsetup_r>
 8000be4:	b1c0      	cbz	r0, 8000c18 <_vfiprintf_r+0x78>
 8000be6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000be8:	07dc      	lsls	r4, r3, #31
 8000bea:	d50e      	bpl.n	8000c0a <_vfiprintf_r+0x6a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	b01d      	add	sp, #116	; 0x74
 8000bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bf6:	4b7b      	ldr	r3, [pc, #492]	; (8000de4 <_vfiprintf_r+0x244>)
 8000bf8:	429d      	cmp	r5, r3
 8000bfa:	d101      	bne.n	8000c00 <_vfiprintf_r+0x60>
 8000bfc:	68b5      	ldr	r5, [r6, #8]
 8000bfe:	e7df      	b.n	8000bc0 <_vfiprintf_r+0x20>
 8000c00:	4b79      	ldr	r3, [pc, #484]	; (8000de8 <_vfiprintf_r+0x248>)
 8000c02:	429d      	cmp	r5, r3
 8000c04:	bf08      	it	eq
 8000c06:	68f5      	ldreq	r5, [r6, #12]
 8000c08:	e7da      	b.n	8000bc0 <_vfiprintf_r+0x20>
 8000c0a:	89ab      	ldrh	r3, [r5, #12]
 8000c0c:	0598      	lsls	r0, r3, #22
 8000c0e:	d4ed      	bmi.n	8000bec <_vfiprintf_r+0x4c>
 8000c10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c12:	f7ff ff06 	bl	8000a22 <__retarget_lock_release_recursive>
 8000c16:	e7e9      	b.n	8000bec <_vfiprintf_r+0x4c>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	9309      	str	r3, [sp, #36]	; 0x24
 8000c1c:	2320      	movs	r3, #32
 8000c1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000c22:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c26:	2330      	movs	r3, #48	; 0x30
 8000c28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000dec <_vfiprintf_r+0x24c>
 8000c2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000c30:	f04f 0901 	mov.w	r9, #1
 8000c34:	4623      	mov	r3, r4
 8000c36:	469a      	mov	sl, r3
 8000c38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c3c:	b10a      	cbz	r2, 8000c42 <_vfiprintf_r+0xa2>
 8000c3e:	2a25      	cmp	r2, #37	; 0x25
 8000c40:	d1f9      	bne.n	8000c36 <_vfiprintf_r+0x96>
 8000c42:	ebba 0b04 	subs.w	fp, sl, r4
 8000c46:	d00b      	beq.n	8000c60 <_vfiprintf_r+0xc0>
 8000c48:	465b      	mov	r3, fp
 8000c4a:	4622      	mov	r2, r4
 8000c4c:	4629      	mov	r1, r5
 8000c4e:	4630      	mov	r0, r6
 8000c50:	f7ff ff93 	bl	8000b7a <__sfputs_r>
 8000c54:	3001      	adds	r0, #1
 8000c56:	f000 80aa 	beq.w	8000dae <_vfiprintf_r+0x20e>
 8000c5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000c5c:	445a      	add	r2, fp
 8000c5e:	9209      	str	r2, [sp, #36]	; 0x24
 8000c60:	f89a 3000 	ldrb.w	r3, [sl]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f000 80a2 	beq.w	8000dae <_vfiprintf_r+0x20e>
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c74:	f10a 0a01 	add.w	sl, sl, #1
 8000c78:	9304      	str	r3, [sp, #16]
 8000c7a:	9307      	str	r3, [sp, #28]
 8000c7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000c80:	931a      	str	r3, [sp, #104]	; 0x68
 8000c82:	4654      	mov	r4, sl
 8000c84:	2205      	movs	r2, #5
 8000c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c8a:	4858      	ldr	r0, [pc, #352]	; (8000dec <_vfiprintf_r+0x24c>)
 8000c8c:	f7ff faa8 	bl	80001e0 <memchr>
 8000c90:	9a04      	ldr	r2, [sp, #16]
 8000c92:	b9d8      	cbnz	r0, 8000ccc <_vfiprintf_r+0x12c>
 8000c94:	06d1      	lsls	r1, r2, #27
 8000c96:	bf44      	itt	mi
 8000c98:	2320      	movmi	r3, #32
 8000c9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c9e:	0713      	lsls	r3, r2, #28
 8000ca0:	bf44      	itt	mi
 8000ca2:	232b      	movmi	r3, #43	; 0x2b
 8000ca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000ca8:	f89a 3000 	ldrb.w	r3, [sl]
 8000cac:	2b2a      	cmp	r3, #42	; 0x2a
 8000cae:	d015      	beq.n	8000cdc <_vfiprintf_r+0x13c>
 8000cb0:	9a07      	ldr	r2, [sp, #28]
 8000cb2:	4654      	mov	r4, sl
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f04f 0c0a 	mov.w	ip, #10
 8000cba:	4621      	mov	r1, r4
 8000cbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000cc0:	3b30      	subs	r3, #48	; 0x30
 8000cc2:	2b09      	cmp	r3, #9
 8000cc4:	d94e      	bls.n	8000d64 <_vfiprintf_r+0x1c4>
 8000cc6:	b1b0      	cbz	r0, 8000cf6 <_vfiprintf_r+0x156>
 8000cc8:	9207      	str	r2, [sp, #28]
 8000cca:	e014      	b.n	8000cf6 <_vfiprintf_r+0x156>
 8000ccc:	eba0 0308 	sub.w	r3, r0, r8
 8000cd0:	fa09 f303 	lsl.w	r3, r9, r3
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	9304      	str	r3, [sp, #16]
 8000cd8:	46a2      	mov	sl, r4
 8000cda:	e7d2      	b.n	8000c82 <_vfiprintf_r+0xe2>
 8000cdc:	9b03      	ldr	r3, [sp, #12]
 8000cde:	1d19      	adds	r1, r3, #4
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	9103      	str	r1, [sp, #12]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	bfbb      	ittet	lt
 8000ce8:	425b      	neglt	r3, r3
 8000cea:	f042 0202 	orrlt.w	r2, r2, #2
 8000cee:	9307      	strge	r3, [sp, #28]
 8000cf0:	9307      	strlt	r3, [sp, #28]
 8000cf2:	bfb8      	it	lt
 8000cf4:	9204      	strlt	r2, [sp, #16]
 8000cf6:	7823      	ldrb	r3, [r4, #0]
 8000cf8:	2b2e      	cmp	r3, #46	; 0x2e
 8000cfa:	d10c      	bne.n	8000d16 <_vfiprintf_r+0x176>
 8000cfc:	7863      	ldrb	r3, [r4, #1]
 8000cfe:	2b2a      	cmp	r3, #42	; 0x2a
 8000d00:	d135      	bne.n	8000d6e <_vfiprintf_r+0x1ce>
 8000d02:	9b03      	ldr	r3, [sp, #12]
 8000d04:	1d1a      	adds	r2, r3, #4
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	9203      	str	r2, [sp, #12]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	bfb8      	it	lt
 8000d0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8000d12:	3402      	adds	r4, #2
 8000d14:	9305      	str	r3, [sp, #20]
 8000d16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000dfc <_vfiprintf_r+0x25c>
 8000d1a:	7821      	ldrb	r1, [r4, #0]
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	4650      	mov	r0, sl
 8000d20:	f7ff fa5e 	bl	80001e0 <memchr>
 8000d24:	b140      	cbz	r0, 8000d38 <_vfiprintf_r+0x198>
 8000d26:	2340      	movs	r3, #64	; 0x40
 8000d28:	eba0 000a 	sub.w	r0, r0, sl
 8000d2c:	fa03 f000 	lsl.w	r0, r3, r0
 8000d30:	9b04      	ldr	r3, [sp, #16]
 8000d32:	4303      	orrs	r3, r0
 8000d34:	3401      	adds	r4, #1
 8000d36:	9304      	str	r3, [sp, #16]
 8000d38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d3c:	482c      	ldr	r0, [pc, #176]	; (8000df0 <_vfiprintf_r+0x250>)
 8000d3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000d42:	2206      	movs	r2, #6
 8000d44:	f7ff fa4c 	bl	80001e0 <memchr>
 8000d48:	2800      	cmp	r0, #0
 8000d4a:	d03f      	beq.n	8000dcc <_vfiprintf_r+0x22c>
 8000d4c:	4b29      	ldr	r3, [pc, #164]	; (8000df4 <_vfiprintf_r+0x254>)
 8000d4e:	bb1b      	cbnz	r3, 8000d98 <_vfiprintf_r+0x1f8>
 8000d50:	9b03      	ldr	r3, [sp, #12]
 8000d52:	3307      	adds	r3, #7
 8000d54:	f023 0307 	bic.w	r3, r3, #7
 8000d58:	3308      	adds	r3, #8
 8000d5a:	9303      	str	r3, [sp, #12]
 8000d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d5e:	443b      	add	r3, r7
 8000d60:	9309      	str	r3, [sp, #36]	; 0x24
 8000d62:	e767      	b.n	8000c34 <_vfiprintf_r+0x94>
 8000d64:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d68:	460c      	mov	r4, r1
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	e7a5      	b.n	8000cba <_vfiprintf_r+0x11a>
 8000d6e:	2300      	movs	r3, #0
 8000d70:	3401      	adds	r4, #1
 8000d72:	9305      	str	r3, [sp, #20]
 8000d74:	4619      	mov	r1, r3
 8000d76:	f04f 0c0a 	mov.w	ip, #10
 8000d7a:	4620      	mov	r0, r4
 8000d7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d80:	3a30      	subs	r2, #48	; 0x30
 8000d82:	2a09      	cmp	r2, #9
 8000d84:	d903      	bls.n	8000d8e <_vfiprintf_r+0x1ee>
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d0c5      	beq.n	8000d16 <_vfiprintf_r+0x176>
 8000d8a:	9105      	str	r1, [sp, #20]
 8000d8c:	e7c3      	b.n	8000d16 <_vfiprintf_r+0x176>
 8000d8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d92:	4604      	mov	r4, r0
 8000d94:	2301      	movs	r3, #1
 8000d96:	e7f0      	b.n	8000d7a <_vfiprintf_r+0x1da>
 8000d98:	ab03      	add	r3, sp, #12
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	462a      	mov	r2, r5
 8000d9e:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <_vfiprintf_r+0x258>)
 8000da0:	a904      	add	r1, sp, #16
 8000da2:	4630      	mov	r0, r6
 8000da4:	f3af 8000 	nop.w
 8000da8:	4607      	mov	r7, r0
 8000daa:	1c78      	adds	r0, r7, #1
 8000dac:	d1d6      	bne.n	8000d5c <_vfiprintf_r+0x1bc>
 8000dae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000db0:	07d9      	lsls	r1, r3, #31
 8000db2:	d405      	bmi.n	8000dc0 <_vfiprintf_r+0x220>
 8000db4:	89ab      	ldrh	r3, [r5, #12]
 8000db6:	059a      	lsls	r2, r3, #22
 8000db8:	d402      	bmi.n	8000dc0 <_vfiprintf_r+0x220>
 8000dba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000dbc:	f7ff fe31 	bl	8000a22 <__retarget_lock_release_recursive>
 8000dc0:	89ab      	ldrh	r3, [r5, #12]
 8000dc2:	065b      	lsls	r3, r3, #25
 8000dc4:	f53f af12 	bmi.w	8000bec <_vfiprintf_r+0x4c>
 8000dc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000dca:	e711      	b.n	8000bf0 <_vfiprintf_r+0x50>
 8000dcc:	ab03      	add	r3, sp, #12
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	462a      	mov	r2, r5
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <_vfiprintf_r+0x258>)
 8000dd4:	a904      	add	r1, sp, #16
 8000dd6:	4630      	mov	r0, r6
 8000dd8:	f000 f880 	bl	8000edc <_printf_i>
 8000ddc:	e7e4      	b.n	8000da8 <_vfiprintf_r+0x208>
 8000dde:	bf00      	nop
 8000de0:	08001774 	.word	0x08001774
 8000de4:	08001794 	.word	0x08001794
 8000de8:	08001754 	.word	0x08001754
 8000dec:	080017b4 	.word	0x080017b4
 8000df0:	080017be 	.word	0x080017be
 8000df4:	00000000 	.word	0x00000000
 8000df8:	08000b7b 	.word	0x08000b7b
 8000dfc:	080017ba 	.word	0x080017ba

08000e00 <_printf_common>:
 8000e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e04:	4616      	mov	r6, r2
 8000e06:	4699      	mov	r9, r3
 8000e08:	688a      	ldr	r2, [r1, #8]
 8000e0a:	690b      	ldr	r3, [r1, #16]
 8000e0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000e10:	4293      	cmp	r3, r2
 8000e12:	bfb8      	it	lt
 8000e14:	4613      	movlt	r3, r2
 8000e16:	6033      	str	r3, [r6, #0]
 8000e18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000e1c:	4607      	mov	r7, r0
 8000e1e:	460c      	mov	r4, r1
 8000e20:	b10a      	cbz	r2, 8000e26 <_printf_common+0x26>
 8000e22:	3301      	adds	r3, #1
 8000e24:	6033      	str	r3, [r6, #0]
 8000e26:	6823      	ldr	r3, [r4, #0]
 8000e28:	0699      	lsls	r1, r3, #26
 8000e2a:	bf42      	ittt	mi
 8000e2c:	6833      	ldrmi	r3, [r6, #0]
 8000e2e:	3302      	addmi	r3, #2
 8000e30:	6033      	strmi	r3, [r6, #0]
 8000e32:	6825      	ldr	r5, [r4, #0]
 8000e34:	f015 0506 	ands.w	r5, r5, #6
 8000e38:	d106      	bne.n	8000e48 <_printf_common+0x48>
 8000e3a:	f104 0a19 	add.w	sl, r4, #25
 8000e3e:	68e3      	ldr	r3, [r4, #12]
 8000e40:	6832      	ldr	r2, [r6, #0]
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	42ab      	cmp	r3, r5
 8000e46:	dc26      	bgt.n	8000e96 <_printf_common+0x96>
 8000e48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000e4c:	1e13      	subs	r3, r2, #0
 8000e4e:	6822      	ldr	r2, [r4, #0]
 8000e50:	bf18      	it	ne
 8000e52:	2301      	movne	r3, #1
 8000e54:	0692      	lsls	r2, r2, #26
 8000e56:	d42b      	bmi.n	8000eb0 <_printf_common+0xb0>
 8000e58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000e5c:	4649      	mov	r1, r9
 8000e5e:	4638      	mov	r0, r7
 8000e60:	47c0      	blx	r8
 8000e62:	3001      	adds	r0, #1
 8000e64:	d01e      	beq.n	8000ea4 <_printf_common+0xa4>
 8000e66:	6823      	ldr	r3, [r4, #0]
 8000e68:	68e5      	ldr	r5, [r4, #12]
 8000e6a:	6832      	ldr	r2, [r6, #0]
 8000e6c:	f003 0306 	and.w	r3, r3, #6
 8000e70:	2b04      	cmp	r3, #4
 8000e72:	bf08      	it	eq
 8000e74:	1aad      	subeq	r5, r5, r2
 8000e76:	68a3      	ldr	r3, [r4, #8]
 8000e78:	6922      	ldr	r2, [r4, #16]
 8000e7a:	bf0c      	ite	eq
 8000e7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e80:	2500      	movne	r5, #0
 8000e82:	4293      	cmp	r3, r2
 8000e84:	bfc4      	itt	gt
 8000e86:	1a9b      	subgt	r3, r3, r2
 8000e88:	18ed      	addgt	r5, r5, r3
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	341a      	adds	r4, #26
 8000e8e:	42b5      	cmp	r5, r6
 8000e90:	d11a      	bne.n	8000ec8 <_printf_common+0xc8>
 8000e92:	2000      	movs	r0, #0
 8000e94:	e008      	b.n	8000ea8 <_printf_common+0xa8>
 8000e96:	2301      	movs	r3, #1
 8000e98:	4652      	mov	r2, sl
 8000e9a:	4649      	mov	r1, r9
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	47c0      	blx	r8
 8000ea0:	3001      	adds	r0, #1
 8000ea2:	d103      	bne.n	8000eac <_printf_common+0xac>
 8000ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eac:	3501      	adds	r5, #1
 8000eae:	e7c6      	b.n	8000e3e <_printf_common+0x3e>
 8000eb0:	18e1      	adds	r1, r4, r3
 8000eb2:	1c5a      	adds	r2, r3, #1
 8000eb4:	2030      	movs	r0, #48	; 0x30
 8000eb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000eba:	4422      	add	r2, r4
 8000ebc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000ec0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000ec4:	3302      	adds	r3, #2
 8000ec6:	e7c7      	b.n	8000e58 <_printf_common+0x58>
 8000ec8:	2301      	movs	r3, #1
 8000eca:	4622      	mov	r2, r4
 8000ecc:	4649      	mov	r1, r9
 8000ece:	4638      	mov	r0, r7
 8000ed0:	47c0      	blx	r8
 8000ed2:	3001      	adds	r0, #1
 8000ed4:	d0e6      	beq.n	8000ea4 <_printf_common+0xa4>
 8000ed6:	3601      	adds	r6, #1
 8000ed8:	e7d9      	b.n	8000e8e <_printf_common+0x8e>
	...

08000edc <_printf_i>:
 8000edc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000ee0:	7e0f      	ldrb	r7, [r1, #24]
 8000ee2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000ee4:	2f78      	cmp	r7, #120	; 0x78
 8000ee6:	4691      	mov	r9, r2
 8000ee8:	4680      	mov	r8, r0
 8000eea:	460c      	mov	r4, r1
 8000eec:	469a      	mov	sl, r3
 8000eee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000ef2:	d807      	bhi.n	8000f04 <_printf_i+0x28>
 8000ef4:	2f62      	cmp	r7, #98	; 0x62
 8000ef6:	d80a      	bhi.n	8000f0e <_printf_i+0x32>
 8000ef8:	2f00      	cmp	r7, #0
 8000efa:	f000 80d8 	beq.w	80010ae <_printf_i+0x1d2>
 8000efe:	2f58      	cmp	r7, #88	; 0x58
 8000f00:	f000 80a3 	beq.w	800104a <_printf_i+0x16e>
 8000f04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000f0c:	e03a      	b.n	8000f84 <_printf_i+0xa8>
 8000f0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000f12:	2b15      	cmp	r3, #21
 8000f14:	d8f6      	bhi.n	8000f04 <_printf_i+0x28>
 8000f16:	a101      	add	r1, pc, #4	; (adr r1, 8000f1c <_printf_i+0x40>)
 8000f18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f1c:	08000f75 	.word	0x08000f75
 8000f20:	08000f89 	.word	0x08000f89
 8000f24:	08000f05 	.word	0x08000f05
 8000f28:	08000f05 	.word	0x08000f05
 8000f2c:	08000f05 	.word	0x08000f05
 8000f30:	08000f05 	.word	0x08000f05
 8000f34:	08000f89 	.word	0x08000f89
 8000f38:	08000f05 	.word	0x08000f05
 8000f3c:	08000f05 	.word	0x08000f05
 8000f40:	08000f05 	.word	0x08000f05
 8000f44:	08000f05 	.word	0x08000f05
 8000f48:	08001095 	.word	0x08001095
 8000f4c:	08000fb9 	.word	0x08000fb9
 8000f50:	08001077 	.word	0x08001077
 8000f54:	08000f05 	.word	0x08000f05
 8000f58:	08000f05 	.word	0x08000f05
 8000f5c:	080010b7 	.word	0x080010b7
 8000f60:	08000f05 	.word	0x08000f05
 8000f64:	08000fb9 	.word	0x08000fb9
 8000f68:	08000f05 	.word	0x08000f05
 8000f6c:	08000f05 	.word	0x08000f05
 8000f70:	0800107f 	.word	0x0800107f
 8000f74:	682b      	ldr	r3, [r5, #0]
 8000f76:	1d1a      	adds	r2, r3, #4
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	602a      	str	r2, [r5, #0]
 8000f7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000f84:	2301      	movs	r3, #1
 8000f86:	e0a3      	b.n	80010d0 <_printf_i+0x1f4>
 8000f88:	6820      	ldr	r0, [r4, #0]
 8000f8a:	6829      	ldr	r1, [r5, #0]
 8000f8c:	0606      	lsls	r6, r0, #24
 8000f8e:	f101 0304 	add.w	r3, r1, #4
 8000f92:	d50a      	bpl.n	8000faa <_printf_i+0xce>
 8000f94:	680e      	ldr	r6, [r1, #0]
 8000f96:	602b      	str	r3, [r5, #0]
 8000f98:	2e00      	cmp	r6, #0
 8000f9a:	da03      	bge.n	8000fa4 <_printf_i+0xc8>
 8000f9c:	232d      	movs	r3, #45	; 0x2d
 8000f9e:	4276      	negs	r6, r6
 8000fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000fa4:	485e      	ldr	r0, [pc, #376]	; (8001120 <_printf_i+0x244>)
 8000fa6:	230a      	movs	r3, #10
 8000fa8:	e019      	b.n	8000fde <_printf_i+0x102>
 8000faa:	680e      	ldr	r6, [r1, #0]
 8000fac:	602b      	str	r3, [r5, #0]
 8000fae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000fb2:	bf18      	it	ne
 8000fb4:	b236      	sxthne	r6, r6
 8000fb6:	e7ef      	b.n	8000f98 <_printf_i+0xbc>
 8000fb8:	682b      	ldr	r3, [r5, #0]
 8000fba:	6820      	ldr	r0, [r4, #0]
 8000fbc:	1d19      	adds	r1, r3, #4
 8000fbe:	6029      	str	r1, [r5, #0]
 8000fc0:	0601      	lsls	r1, r0, #24
 8000fc2:	d501      	bpl.n	8000fc8 <_printf_i+0xec>
 8000fc4:	681e      	ldr	r6, [r3, #0]
 8000fc6:	e002      	b.n	8000fce <_printf_i+0xf2>
 8000fc8:	0646      	lsls	r6, r0, #25
 8000fca:	d5fb      	bpl.n	8000fc4 <_printf_i+0xe8>
 8000fcc:	881e      	ldrh	r6, [r3, #0]
 8000fce:	4854      	ldr	r0, [pc, #336]	; (8001120 <_printf_i+0x244>)
 8000fd0:	2f6f      	cmp	r7, #111	; 0x6f
 8000fd2:	bf0c      	ite	eq
 8000fd4:	2308      	moveq	r3, #8
 8000fd6:	230a      	movne	r3, #10
 8000fd8:	2100      	movs	r1, #0
 8000fda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000fde:	6865      	ldr	r5, [r4, #4]
 8000fe0:	60a5      	str	r5, [r4, #8]
 8000fe2:	2d00      	cmp	r5, #0
 8000fe4:	bfa2      	ittt	ge
 8000fe6:	6821      	ldrge	r1, [r4, #0]
 8000fe8:	f021 0104 	bicge.w	r1, r1, #4
 8000fec:	6021      	strge	r1, [r4, #0]
 8000fee:	b90e      	cbnz	r6, 8000ff4 <_printf_i+0x118>
 8000ff0:	2d00      	cmp	r5, #0
 8000ff2:	d04d      	beq.n	8001090 <_printf_i+0x1b4>
 8000ff4:	4615      	mov	r5, r2
 8000ff6:	fbb6 f1f3 	udiv	r1, r6, r3
 8000ffa:	fb03 6711 	mls	r7, r3, r1, r6
 8000ffe:	5dc7      	ldrb	r7, [r0, r7]
 8001000:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001004:	4637      	mov	r7, r6
 8001006:	42bb      	cmp	r3, r7
 8001008:	460e      	mov	r6, r1
 800100a:	d9f4      	bls.n	8000ff6 <_printf_i+0x11a>
 800100c:	2b08      	cmp	r3, #8
 800100e:	d10b      	bne.n	8001028 <_printf_i+0x14c>
 8001010:	6823      	ldr	r3, [r4, #0]
 8001012:	07de      	lsls	r6, r3, #31
 8001014:	d508      	bpl.n	8001028 <_printf_i+0x14c>
 8001016:	6923      	ldr	r3, [r4, #16]
 8001018:	6861      	ldr	r1, [r4, #4]
 800101a:	4299      	cmp	r1, r3
 800101c:	bfde      	ittt	le
 800101e:	2330      	movle	r3, #48	; 0x30
 8001020:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001024:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001028:	1b52      	subs	r2, r2, r5
 800102a:	6122      	str	r2, [r4, #16]
 800102c:	f8cd a000 	str.w	sl, [sp]
 8001030:	464b      	mov	r3, r9
 8001032:	aa03      	add	r2, sp, #12
 8001034:	4621      	mov	r1, r4
 8001036:	4640      	mov	r0, r8
 8001038:	f7ff fee2 	bl	8000e00 <_printf_common>
 800103c:	3001      	adds	r0, #1
 800103e:	d14c      	bne.n	80010da <_printf_i+0x1fe>
 8001040:	f04f 30ff 	mov.w	r0, #4294967295
 8001044:	b004      	add	sp, #16
 8001046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800104a:	4835      	ldr	r0, [pc, #212]	; (8001120 <_printf_i+0x244>)
 800104c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001050:	6829      	ldr	r1, [r5, #0]
 8001052:	6823      	ldr	r3, [r4, #0]
 8001054:	f851 6b04 	ldr.w	r6, [r1], #4
 8001058:	6029      	str	r1, [r5, #0]
 800105a:	061d      	lsls	r5, r3, #24
 800105c:	d514      	bpl.n	8001088 <_printf_i+0x1ac>
 800105e:	07df      	lsls	r7, r3, #31
 8001060:	bf44      	itt	mi
 8001062:	f043 0320 	orrmi.w	r3, r3, #32
 8001066:	6023      	strmi	r3, [r4, #0]
 8001068:	b91e      	cbnz	r6, 8001072 <_printf_i+0x196>
 800106a:	6823      	ldr	r3, [r4, #0]
 800106c:	f023 0320 	bic.w	r3, r3, #32
 8001070:	6023      	str	r3, [r4, #0]
 8001072:	2310      	movs	r3, #16
 8001074:	e7b0      	b.n	8000fd8 <_printf_i+0xfc>
 8001076:	6823      	ldr	r3, [r4, #0]
 8001078:	f043 0320 	orr.w	r3, r3, #32
 800107c:	6023      	str	r3, [r4, #0]
 800107e:	2378      	movs	r3, #120	; 0x78
 8001080:	4828      	ldr	r0, [pc, #160]	; (8001124 <_printf_i+0x248>)
 8001082:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001086:	e7e3      	b.n	8001050 <_printf_i+0x174>
 8001088:	0659      	lsls	r1, r3, #25
 800108a:	bf48      	it	mi
 800108c:	b2b6      	uxthmi	r6, r6
 800108e:	e7e6      	b.n	800105e <_printf_i+0x182>
 8001090:	4615      	mov	r5, r2
 8001092:	e7bb      	b.n	800100c <_printf_i+0x130>
 8001094:	682b      	ldr	r3, [r5, #0]
 8001096:	6826      	ldr	r6, [r4, #0]
 8001098:	6961      	ldr	r1, [r4, #20]
 800109a:	1d18      	adds	r0, r3, #4
 800109c:	6028      	str	r0, [r5, #0]
 800109e:	0635      	lsls	r5, r6, #24
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	d501      	bpl.n	80010a8 <_printf_i+0x1cc>
 80010a4:	6019      	str	r1, [r3, #0]
 80010a6:	e002      	b.n	80010ae <_printf_i+0x1d2>
 80010a8:	0670      	lsls	r0, r6, #25
 80010aa:	d5fb      	bpl.n	80010a4 <_printf_i+0x1c8>
 80010ac:	8019      	strh	r1, [r3, #0]
 80010ae:	2300      	movs	r3, #0
 80010b0:	6123      	str	r3, [r4, #16]
 80010b2:	4615      	mov	r5, r2
 80010b4:	e7ba      	b.n	800102c <_printf_i+0x150>
 80010b6:	682b      	ldr	r3, [r5, #0]
 80010b8:	1d1a      	adds	r2, r3, #4
 80010ba:	602a      	str	r2, [r5, #0]
 80010bc:	681d      	ldr	r5, [r3, #0]
 80010be:	6862      	ldr	r2, [r4, #4]
 80010c0:	2100      	movs	r1, #0
 80010c2:	4628      	mov	r0, r5
 80010c4:	f7ff f88c 	bl	80001e0 <memchr>
 80010c8:	b108      	cbz	r0, 80010ce <_printf_i+0x1f2>
 80010ca:	1b40      	subs	r0, r0, r5
 80010cc:	6060      	str	r0, [r4, #4]
 80010ce:	6863      	ldr	r3, [r4, #4]
 80010d0:	6123      	str	r3, [r4, #16]
 80010d2:	2300      	movs	r3, #0
 80010d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80010d8:	e7a8      	b.n	800102c <_printf_i+0x150>
 80010da:	6923      	ldr	r3, [r4, #16]
 80010dc:	462a      	mov	r2, r5
 80010de:	4649      	mov	r1, r9
 80010e0:	4640      	mov	r0, r8
 80010e2:	47d0      	blx	sl
 80010e4:	3001      	adds	r0, #1
 80010e6:	d0ab      	beq.n	8001040 <_printf_i+0x164>
 80010e8:	6823      	ldr	r3, [r4, #0]
 80010ea:	079b      	lsls	r3, r3, #30
 80010ec:	d413      	bmi.n	8001116 <_printf_i+0x23a>
 80010ee:	68e0      	ldr	r0, [r4, #12]
 80010f0:	9b03      	ldr	r3, [sp, #12]
 80010f2:	4298      	cmp	r0, r3
 80010f4:	bfb8      	it	lt
 80010f6:	4618      	movlt	r0, r3
 80010f8:	e7a4      	b.n	8001044 <_printf_i+0x168>
 80010fa:	2301      	movs	r3, #1
 80010fc:	4632      	mov	r2, r6
 80010fe:	4649      	mov	r1, r9
 8001100:	4640      	mov	r0, r8
 8001102:	47d0      	blx	sl
 8001104:	3001      	adds	r0, #1
 8001106:	d09b      	beq.n	8001040 <_printf_i+0x164>
 8001108:	3501      	adds	r5, #1
 800110a:	68e3      	ldr	r3, [r4, #12]
 800110c:	9903      	ldr	r1, [sp, #12]
 800110e:	1a5b      	subs	r3, r3, r1
 8001110:	42ab      	cmp	r3, r5
 8001112:	dcf2      	bgt.n	80010fa <_printf_i+0x21e>
 8001114:	e7eb      	b.n	80010ee <_printf_i+0x212>
 8001116:	2500      	movs	r5, #0
 8001118:	f104 0619 	add.w	r6, r4, #25
 800111c:	e7f5      	b.n	800110a <_printf_i+0x22e>
 800111e:	bf00      	nop
 8001120:	080017c5 	.word	0x080017c5
 8001124:	080017d6 	.word	0x080017d6

08001128 <_sbrk_r>:
 8001128:	b538      	push	{r3, r4, r5, lr}
 800112a:	4d06      	ldr	r5, [pc, #24]	; (8001144 <_sbrk_r+0x1c>)
 800112c:	2300      	movs	r3, #0
 800112e:	4604      	mov	r4, r0
 8001130:	4608      	mov	r0, r1
 8001132:	602b      	str	r3, [r5, #0]
 8001134:	f7ff fa24 	bl	8000580 <_sbrk>
 8001138:	1c43      	adds	r3, r0, #1
 800113a:	d102      	bne.n	8001142 <_sbrk_r+0x1a>
 800113c:	682b      	ldr	r3, [r5, #0]
 800113e:	b103      	cbz	r3, 8001142 <_sbrk_r+0x1a>
 8001140:	6023      	str	r3, [r4, #0]
 8001142:	bd38      	pop	{r3, r4, r5, pc}
 8001144:	200000ac 	.word	0x200000ac

08001148 <__sread>:
 8001148:	b510      	push	{r4, lr}
 800114a:	460c      	mov	r4, r1
 800114c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001150:	f000 fab2 	bl	80016b8 <_read_r>
 8001154:	2800      	cmp	r0, #0
 8001156:	bfab      	itete	ge
 8001158:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800115a:	89a3      	ldrhlt	r3, [r4, #12]
 800115c:	181b      	addge	r3, r3, r0
 800115e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001162:	bfac      	ite	ge
 8001164:	6563      	strge	r3, [r4, #84]	; 0x54
 8001166:	81a3      	strhlt	r3, [r4, #12]
 8001168:	bd10      	pop	{r4, pc}

0800116a <__swrite>:
 800116a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800116e:	461f      	mov	r7, r3
 8001170:	898b      	ldrh	r3, [r1, #12]
 8001172:	05db      	lsls	r3, r3, #23
 8001174:	4605      	mov	r5, r0
 8001176:	460c      	mov	r4, r1
 8001178:	4616      	mov	r6, r2
 800117a:	d505      	bpl.n	8001188 <__swrite+0x1e>
 800117c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001180:	2302      	movs	r3, #2
 8001182:	2200      	movs	r2, #0
 8001184:	f000 f9c8 	bl	8001518 <_lseek_r>
 8001188:	89a3      	ldrh	r3, [r4, #12]
 800118a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800118e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001192:	81a3      	strh	r3, [r4, #12]
 8001194:	4632      	mov	r2, r6
 8001196:	463b      	mov	r3, r7
 8001198:	4628      	mov	r0, r5
 800119a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800119e:	f000 b869 	b.w	8001274 <_write_r>

080011a2 <__sseek>:
 80011a2:	b510      	push	{r4, lr}
 80011a4:	460c      	mov	r4, r1
 80011a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011aa:	f000 f9b5 	bl	8001518 <_lseek_r>
 80011ae:	1c43      	adds	r3, r0, #1
 80011b0:	89a3      	ldrh	r3, [r4, #12]
 80011b2:	bf15      	itete	ne
 80011b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80011b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80011ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80011be:	81a3      	strheq	r3, [r4, #12]
 80011c0:	bf18      	it	ne
 80011c2:	81a3      	strhne	r3, [r4, #12]
 80011c4:	bd10      	pop	{r4, pc}

080011c6 <__sclose>:
 80011c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011ca:	f000 b8d3 	b.w	8001374 <_close_r>
	...

080011d0 <__swbuf_r>:
 80011d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011d2:	460e      	mov	r6, r1
 80011d4:	4614      	mov	r4, r2
 80011d6:	4605      	mov	r5, r0
 80011d8:	b118      	cbz	r0, 80011e2 <__swbuf_r+0x12>
 80011da:	6983      	ldr	r3, [r0, #24]
 80011dc:	b90b      	cbnz	r3, 80011e2 <__swbuf_r+0x12>
 80011de:	f7ff fb81 	bl	80008e4 <__sinit>
 80011e2:	4b21      	ldr	r3, [pc, #132]	; (8001268 <__swbuf_r+0x98>)
 80011e4:	429c      	cmp	r4, r3
 80011e6:	d12b      	bne.n	8001240 <__swbuf_r+0x70>
 80011e8:	686c      	ldr	r4, [r5, #4]
 80011ea:	69a3      	ldr	r3, [r4, #24]
 80011ec:	60a3      	str	r3, [r4, #8]
 80011ee:	89a3      	ldrh	r3, [r4, #12]
 80011f0:	071a      	lsls	r2, r3, #28
 80011f2:	d52f      	bpl.n	8001254 <__swbuf_r+0x84>
 80011f4:	6923      	ldr	r3, [r4, #16]
 80011f6:	b36b      	cbz	r3, 8001254 <__swbuf_r+0x84>
 80011f8:	6923      	ldr	r3, [r4, #16]
 80011fa:	6820      	ldr	r0, [r4, #0]
 80011fc:	1ac0      	subs	r0, r0, r3
 80011fe:	6963      	ldr	r3, [r4, #20]
 8001200:	b2f6      	uxtb	r6, r6
 8001202:	4283      	cmp	r3, r0
 8001204:	4637      	mov	r7, r6
 8001206:	dc04      	bgt.n	8001212 <__swbuf_r+0x42>
 8001208:	4621      	mov	r1, r4
 800120a:	4628      	mov	r0, r5
 800120c:	f000 f948 	bl	80014a0 <_fflush_r>
 8001210:	bb30      	cbnz	r0, 8001260 <__swbuf_r+0x90>
 8001212:	68a3      	ldr	r3, [r4, #8]
 8001214:	3b01      	subs	r3, #1
 8001216:	60a3      	str	r3, [r4, #8]
 8001218:	6823      	ldr	r3, [r4, #0]
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	6022      	str	r2, [r4, #0]
 800121e:	701e      	strb	r6, [r3, #0]
 8001220:	6963      	ldr	r3, [r4, #20]
 8001222:	3001      	adds	r0, #1
 8001224:	4283      	cmp	r3, r0
 8001226:	d004      	beq.n	8001232 <__swbuf_r+0x62>
 8001228:	89a3      	ldrh	r3, [r4, #12]
 800122a:	07db      	lsls	r3, r3, #31
 800122c:	d506      	bpl.n	800123c <__swbuf_r+0x6c>
 800122e:	2e0a      	cmp	r6, #10
 8001230:	d104      	bne.n	800123c <__swbuf_r+0x6c>
 8001232:	4621      	mov	r1, r4
 8001234:	4628      	mov	r0, r5
 8001236:	f000 f933 	bl	80014a0 <_fflush_r>
 800123a:	b988      	cbnz	r0, 8001260 <__swbuf_r+0x90>
 800123c:	4638      	mov	r0, r7
 800123e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001240:	4b0a      	ldr	r3, [pc, #40]	; (800126c <__swbuf_r+0x9c>)
 8001242:	429c      	cmp	r4, r3
 8001244:	d101      	bne.n	800124a <__swbuf_r+0x7a>
 8001246:	68ac      	ldr	r4, [r5, #8]
 8001248:	e7cf      	b.n	80011ea <__swbuf_r+0x1a>
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <__swbuf_r+0xa0>)
 800124c:	429c      	cmp	r4, r3
 800124e:	bf08      	it	eq
 8001250:	68ec      	ldreq	r4, [r5, #12]
 8001252:	e7ca      	b.n	80011ea <__swbuf_r+0x1a>
 8001254:	4621      	mov	r1, r4
 8001256:	4628      	mov	r0, r5
 8001258:	f000 f81e 	bl	8001298 <__swsetup_r>
 800125c:	2800      	cmp	r0, #0
 800125e:	d0cb      	beq.n	80011f8 <__swbuf_r+0x28>
 8001260:	f04f 37ff 	mov.w	r7, #4294967295
 8001264:	e7ea      	b.n	800123c <__swbuf_r+0x6c>
 8001266:	bf00      	nop
 8001268:	08001774 	.word	0x08001774
 800126c:	08001794 	.word	0x08001794
 8001270:	08001754 	.word	0x08001754

08001274 <_write_r>:
 8001274:	b538      	push	{r3, r4, r5, lr}
 8001276:	4d07      	ldr	r5, [pc, #28]	; (8001294 <_write_r+0x20>)
 8001278:	4604      	mov	r4, r0
 800127a:	4608      	mov	r0, r1
 800127c:	4611      	mov	r1, r2
 800127e:	2200      	movs	r2, #0
 8001280:	602a      	str	r2, [r5, #0]
 8001282:	461a      	mov	r2, r3
 8001284:	f7ff f92b 	bl	80004de <_write>
 8001288:	1c43      	adds	r3, r0, #1
 800128a:	d102      	bne.n	8001292 <_write_r+0x1e>
 800128c:	682b      	ldr	r3, [r5, #0]
 800128e:	b103      	cbz	r3, 8001292 <_write_r+0x1e>
 8001290:	6023      	str	r3, [r4, #0]
 8001292:	bd38      	pop	{r3, r4, r5, pc}
 8001294:	200000ac 	.word	0x200000ac

08001298 <__swsetup_r>:
 8001298:	4b32      	ldr	r3, [pc, #200]	; (8001364 <__swsetup_r+0xcc>)
 800129a:	b570      	push	{r4, r5, r6, lr}
 800129c:	681d      	ldr	r5, [r3, #0]
 800129e:	4606      	mov	r6, r0
 80012a0:	460c      	mov	r4, r1
 80012a2:	b125      	cbz	r5, 80012ae <__swsetup_r+0x16>
 80012a4:	69ab      	ldr	r3, [r5, #24]
 80012a6:	b913      	cbnz	r3, 80012ae <__swsetup_r+0x16>
 80012a8:	4628      	mov	r0, r5
 80012aa:	f7ff fb1b 	bl	80008e4 <__sinit>
 80012ae:	4b2e      	ldr	r3, [pc, #184]	; (8001368 <__swsetup_r+0xd0>)
 80012b0:	429c      	cmp	r4, r3
 80012b2:	d10f      	bne.n	80012d4 <__swsetup_r+0x3c>
 80012b4:	686c      	ldr	r4, [r5, #4]
 80012b6:	89a3      	ldrh	r3, [r4, #12]
 80012b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80012bc:	0719      	lsls	r1, r3, #28
 80012be:	d42c      	bmi.n	800131a <__swsetup_r+0x82>
 80012c0:	06dd      	lsls	r5, r3, #27
 80012c2:	d411      	bmi.n	80012e8 <__swsetup_r+0x50>
 80012c4:	2309      	movs	r3, #9
 80012c6:	6033      	str	r3, [r6, #0]
 80012c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80012cc:	81a3      	strh	r3, [r4, #12]
 80012ce:	f04f 30ff 	mov.w	r0, #4294967295
 80012d2:	e03e      	b.n	8001352 <__swsetup_r+0xba>
 80012d4:	4b25      	ldr	r3, [pc, #148]	; (800136c <__swsetup_r+0xd4>)
 80012d6:	429c      	cmp	r4, r3
 80012d8:	d101      	bne.n	80012de <__swsetup_r+0x46>
 80012da:	68ac      	ldr	r4, [r5, #8]
 80012dc:	e7eb      	b.n	80012b6 <__swsetup_r+0x1e>
 80012de:	4b24      	ldr	r3, [pc, #144]	; (8001370 <__swsetup_r+0xd8>)
 80012e0:	429c      	cmp	r4, r3
 80012e2:	bf08      	it	eq
 80012e4:	68ec      	ldreq	r4, [r5, #12]
 80012e6:	e7e6      	b.n	80012b6 <__swsetup_r+0x1e>
 80012e8:	0758      	lsls	r0, r3, #29
 80012ea:	d512      	bpl.n	8001312 <__swsetup_r+0x7a>
 80012ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012ee:	b141      	cbz	r1, 8001302 <__swsetup_r+0x6a>
 80012f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012f4:	4299      	cmp	r1, r3
 80012f6:	d002      	beq.n	80012fe <__swsetup_r+0x66>
 80012f8:	4630      	mov	r0, r6
 80012fa:	f000 f991 	bl	8001620 <_free_r>
 80012fe:	2300      	movs	r3, #0
 8001300:	6363      	str	r3, [r4, #52]	; 0x34
 8001302:	89a3      	ldrh	r3, [r4, #12]
 8001304:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001308:	81a3      	strh	r3, [r4, #12]
 800130a:	2300      	movs	r3, #0
 800130c:	6063      	str	r3, [r4, #4]
 800130e:	6923      	ldr	r3, [r4, #16]
 8001310:	6023      	str	r3, [r4, #0]
 8001312:	89a3      	ldrh	r3, [r4, #12]
 8001314:	f043 0308 	orr.w	r3, r3, #8
 8001318:	81a3      	strh	r3, [r4, #12]
 800131a:	6923      	ldr	r3, [r4, #16]
 800131c:	b94b      	cbnz	r3, 8001332 <__swsetup_r+0x9a>
 800131e:	89a3      	ldrh	r3, [r4, #12]
 8001320:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001328:	d003      	beq.n	8001332 <__swsetup_r+0x9a>
 800132a:	4621      	mov	r1, r4
 800132c:	4630      	mov	r0, r6
 800132e:	f000 f92b 	bl	8001588 <__smakebuf_r>
 8001332:	89a0      	ldrh	r0, [r4, #12]
 8001334:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001338:	f010 0301 	ands.w	r3, r0, #1
 800133c:	d00a      	beq.n	8001354 <__swsetup_r+0xbc>
 800133e:	2300      	movs	r3, #0
 8001340:	60a3      	str	r3, [r4, #8]
 8001342:	6963      	ldr	r3, [r4, #20]
 8001344:	425b      	negs	r3, r3
 8001346:	61a3      	str	r3, [r4, #24]
 8001348:	6923      	ldr	r3, [r4, #16]
 800134a:	b943      	cbnz	r3, 800135e <__swsetup_r+0xc6>
 800134c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001350:	d1ba      	bne.n	80012c8 <__swsetup_r+0x30>
 8001352:	bd70      	pop	{r4, r5, r6, pc}
 8001354:	0781      	lsls	r1, r0, #30
 8001356:	bf58      	it	pl
 8001358:	6963      	ldrpl	r3, [r4, #20]
 800135a:	60a3      	str	r3, [r4, #8]
 800135c:	e7f4      	b.n	8001348 <__swsetup_r+0xb0>
 800135e:	2000      	movs	r0, #0
 8001360:	e7f7      	b.n	8001352 <__swsetup_r+0xba>
 8001362:	bf00      	nop
 8001364:	2000000c 	.word	0x2000000c
 8001368:	08001774 	.word	0x08001774
 800136c:	08001794 	.word	0x08001794
 8001370:	08001754 	.word	0x08001754

08001374 <_close_r>:
 8001374:	b538      	push	{r3, r4, r5, lr}
 8001376:	4d06      	ldr	r5, [pc, #24]	; (8001390 <_close_r+0x1c>)
 8001378:	2300      	movs	r3, #0
 800137a:	4604      	mov	r4, r0
 800137c:	4608      	mov	r0, r1
 800137e:	602b      	str	r3, [r5, #0]
 8001380:	f7ff f8c9 	bl	8000516 <_close>
 8001384:	1c43      	adds	r3, r0, #1
 8001386:	d102      	bne.n	800138e <_close_r+0x1a>
 8001388:	682b      	ldr	r3, [r5, #0]
 800138a:	b103      	cbz	r3, 800138e <_close_r+0x1a>
 800138c:	6023      	str	r3, [r4, #0]
 800138e:	bd38      	pop	{r3, r4, r5, pc}
 8001390:	200000ac 	.word	0x200000ac

08001394 <__sflush_r>:
 8001394:	898a      	ldrh	r2, [r1, #12]
 8001396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800139a:	4605      	mov	r5, r0
 800139c:	0710      	lsls	r0, r2, #28
 800139e:	460c      	mov	r4, r1
 80013a0:	d458      	bmi.n	8001454 <__sflush_r+0xc0>
 80013a2:	684b      	ldr	r3, [r1, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	dc05      	bgt.n	80013b4 <__sflush_r+0x20>
 80013a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	dc02      	bgt.n	80013b4 <__sflush_r+0x20>
 80013ae:	2000      	movs	r0, #0
 80013b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80013b6:	2e00      	cmp	r6, #0
 80013b8:	d0f9      	beq.n	80013ae <__sflush_r+0x1a>
 80013ba:	2300      	movs	r3, #0
 80013bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80013c0:	682f      	ldr	r7, [r5, #0]
 80013c2:	602b      	str	r3, [r5, #0]
 80013c4:	d032      	beq.n	800142c <__sflush_r+0x98>
 80013c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80013c8:	89a3      	ldrh	r3, [r4, #12]
 80013ca:	075a      	lsls	r2, r3, #29
 80013cc:	d505      	bpl.n	80013da <__sflush_r+0x46>
 80013ce:	6863      	ldr	r3, [r4, #4]
 80013d0:	1ac0      	subs	r0, r0, r3
 80013d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80013d4:	b10b      	cbz	r3, 80013da <__sflush_r+0x46>
 80013d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013d8:	1ac0      	subs	r0, r0, r3
 80013da:	2300      	movs	r3, #0
 80013dc:	4602      	mov	r2, r0
 80013de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80013e0:	6a21      	ldr	r1, [r4, #32]
 80013e2:	4628      	mov	r0, r5
 80013e4:	47b0      	blx	r6
 80013e6:	1c43      	adds	r3, r0, #1
 80013e8:	89a3      	ldrh	r3, [r4, #12]
 80013ea:	d106      	bne.n	80013fa <__sflush_r+0x66>
 80013ec:	6829      	ldr	r1, [r5, #0]
 80013ee:	291d      	cmp	r1, #29
 80013f0:	d82c      	bhi.n	800144c <__sflush_r+0xb8>
 80013f2:	4a2a      	ldr	r2, [pc, #168]	; (800149c <__sflush_r+0x108>)
 80013f4:	40ca      	lsrs	r2, r1
 80013f6:	07d6      	lsls	r6, r2, #31
 80013f8:	d528      	bpl.n	800144c <__sflush_r+0xb8>
 80013fa:	2200      	movs	r2, #0
 80013fc:	6062      	str	r2, [r4, #4]
 80013fe:	04d9      	lsls	r1, r3, #19
 8001400:	6922      	ldr	r2, [r4, #16]
 8001402:	6022      	str	r2, [r4, #0]
 8001404:	d504      	bpl.n	8001410 <__sflush_r+0x7c>
 8001406:	1c42      	adds	r2, r0, #1
 8001408:	d101      	bne.n	800140e <__sflush_r+0x7a>
 800140a:	682b      	ldr	r3, [r5, #0]
 800140c:	b903      	cbnz	r3, 8001410 <__sflush_r+0x7c>
 800140e:	6560      	str	r0, [r4, #84]	; 0x54
 8001410:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001412:	602f      	str	r7, [r5, #0]
 8001414:	2900      	cmp	r1, #0
 8001416:	d0ca      	beq.n	80013ae <__sflush_r+0x1a>
 8001418:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800141c:	4299      	cmp	r1, r3
 800141e:	d002      	beq.n	8001426 <__sflush_r+0x92>
 8001420:	4628      	mov	r0, r5
 8001422:	f000 f8fd 	bl	8001620 <_free_r>
 8001426:	2000      	movs	r0, #0
 8001428:	6360      	str	r0, [r4, #52]	; 0x34
 800142a:	e7c1      	b.n	80013b0 <__sflush_r+0x1c>
 800142c:	6a21      	ldr	r1, [r4, #32]
 800142e:	2301      	movs	r3, #1
 8001430:	4628      	mov	r0, r5
 8001432:	47b0      	blx	r6
 8001434:	1c41      	adds	r1, r0, #1
 8001436:	d1c7      	bne.n	80013c8 <__sflush_r+0x34>
 8001438:	682b      	ldr	r3, [r5, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0c4      	beq.n	80013c8 <__sflush_r+0x34>
 800143e:	2b1d      	cmp	r3, #29
 8001440:	d001      	beq.n	8001446 <__sflush_r+0xb2>
 8001442:	2b16      	cmp	r3, #22
 8001444:	d101      	bne.n	800144a <__sflush_r+0xb6>
 8001446:	602f      	str	r7, [r5, #0]
 8001448:	e7b1      	b.n	80013ae <__sflush_r+0x1a>
 800144a:	89a3      	ldrh	r3, [r4, #12]
 800144c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001450:	81a3      	strh	r3, [r4, #12]
 8001452:	e7ad      	b.n	80013b0 <__sflush_r+0x1c>
 8001454:	690f      	ldr	r7, [r1, #16]
 8001456:	2f00      	cmp	r7, #0
 8001458:	d0a9      	beq.n	80013ae <__sflush_r+0x1a>
 800145a:	0793      	lsls	r3, r2, #30
 800145c:	680e      	ldr	r6, [r1, #0]
 800145e:	bf08      	it	eq
 8001460:	694b      	ldreq	r3, [r1, #20]
 8001462:	600f      	str	r7, [r1, #0]
 8001464:	bf18      	it	ne
 8001466:	2300      	movne	r3, #0
 8001468:	eba6 0807 	sub.w	r8, r6, r7
 800146c:	608b      	str	r3, [r1, #8]
 800146e:	f1b8 0f00 	cmp.w	r8, #0
 8001472:	dd9c      	ble.n	80013ae <__sflush_r+0x1a>
 8001474:	6a21      	ldr	r1, [r4, #32]
 8001476:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001478:	4643      	mov	r3, r8
 800147a:	463a      	mov	r2, r7
 800147c:	4628      	mov	r0, r5
 800147e:	47b0      	blx	r6
 8001480:	2800      	cmp	r0, #0
 8001482:	dc06      	bgt.n	8001492 <__sflush_r+0xfe>
 8001484:	89a3      	ldrh	r3, [r4, #12]
 8001486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800148a:	81a3      	strh	r3, [r4, #12]
 800148c:	f04f 30ff 	mov.w	r0, #4294967295
 8001490:	e78e      	b.n	80013b0 <__sflush_r+0x1c>
 8001492:	4407      	add	r7, r0
 8001494:	eba8 0800 	sub.w	r8, r8, r0
 8001498:	e7e9      	b.n	800146e <__sflush_r+0xda>
 800149a:	bf00      	nop
 800149c:	20400001 	.word	0x20400001

080014a0 <_fflush_r>:
 80014a0:	b538      	push	{r3, r4, r5, lr}
 80014a2:	690b      	ldr	r3, [r1, #16]
 80014a4:	4605      	mov	r5, r0
 80014a6:	460c      	mov	r4, r1
 80014a8:	b913      	cbnz	r3, 80014b0 <_fflush_r+0x10>
 80014aa:	2500      	movs	r5, #0
 80014ac:	4628      	mov	r0, r5
 80014ae:	bd38      	pop	{r3, r4, r5, pc}
 80014b0:	b118      	cbz	r0, 80014ba <_fflush_r+0x1a>
 80014b2:	6983      	ldr	r3, [r0, #24]
 80014b4:	b90b      	cbnz	r3, 80014ba <_fflush_r+0x1a>
 80014b6:	f7ff fa15 	bl	80008e4 <__sinit>
 80014ba:	4b14      	ldr	r3, [pc, #80]	; (800150c <_fflush_r+0x6c>)
 80014bc:	429c      	cmp	r4, r3
 80014be:	d11b      	bne.n	80014f8 <_fflush_r+0x58>
 80014c0:	686c      	ldr	r4, [r5, #4]
 80014c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0ef      	beq.n	80014aa <_fflush_r+0xa>
 80014ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80014cc:	07d0      	lsls	r0, r2, #31
 80014ce:	d404      	bmi.n	80014da <_fflush_r+0x3a>
 80014d0:	0599      	lsls	r1, r3, #22
 80014d2:	d402      	bmi.n	80014da <_fflush_r+0x3a>
 80014d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014d6:	f7ff faa3 	bl	8000a20 <__retarget_lock_acquire_recursive>
 80014da:	4628      	mov	r0, r5
 80014dc:	4621      	mov	r1, r4
 80014de:	f7ff ff59 	bl	8001394 <__sflush_r>
 80014e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80014e4:	07da      	lsls	r2, r3, #31
 80014e6:	4605      	mov	r5, r0
 80014e8:	d4e0      	bmi.n	80014ac <_fflush_r+0xc>
 80014ea:	89a3      	ldrh	r3, [r4, #12]
 80014ec:	059b      	lsls	r3, r3, #22
 80014ee:	d4dd      	bmi.n	80014ac <_fflush_r+0xc>
 80014f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014f2:	f7ff fa96 	bl	8000a22 <__retarget_lock_release_recursive>
 80014f6:	e7d9      	b.n	80014ac <_fflush_r+0xc>
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <_fflush_r+0x70>)
 80014fa:	429c      	cmp	r4, r3
 80014fc:	d101      	bne.n	8001502 <_fflush_r+0x62>
 80014fe:	68ac      	ldr	r4, [r5, #8]
 8001500:	e7df      	b.n	80014c2 <_fflush_r+0x22>
 8001502:	4b04      	ldr	r3, [pc, #16]	; (8001514 <_fflush_r+0x74>)
 8001504:	429c      	cmp	r4, r3
 8001506:	bf08      	it	eq
 8001508:	68ec      	ldreq	r4, [r5, #12]
 800150a:	e7da      	b.n	80014c2 <_fflush_r+0x22>
 800150c:	08001774 	.word	0x08001774
 8001510:	08001794 	.word	0x08001794
 8001514:	08001754 	.word	0x08001754

08001518 <_lseek_r>:
 8001518:	b538      	push	{r3, r4, r5, lr}
 800151a:	4d07      	ldr	r5, [pc, #28]	; (8001538 <_lseek_r+0x20>)
 800151c:	4604      	mov	r4, r0
 800151e:	4608      	mov	r0, r1
 8001520:	4611      	mov	r1, r2
 8001522:	2200      	movs	r2, #0
 8001524:	602a      	str	r2, [r5, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	f7ff f81c 	bl	8000564 <_lseek>
 800152c:	1c43      	adds	r3, r0, #1
 800152e:	d102      	bne.n	8001536 <_lseek_r+0x1e>
 8001530:	682b      	ldr	r3, [r5, #0]
 8001532:	b103      	cbz	r3, 8001536 <_lseek_r+0x1e>
 8001534:	6023      	str	r3, [r4, #0]
 8001536:	bd38      	pop	{r3, r4, r5, pc}
 8001538:	200000ac 	.word	0x200000ac

0800153c <__swhatbuf_r>:
 800153c:	b570      	push	{r4, r5, r6, lr}
 800153e:	460e      	mov	r6, r1
 8001540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001544:	2900      	cmp	r1, #0
 8001546:	b096      	sub	sp, #88	; 0x58
 8001548:	4614      	mov	r4, r2
 800154a:	461d      	mov	r5, r3
 800154c:	da08      	bge.n	8001560 <__swhatbuf_r+0x24>
 800154e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001552:	2200      	movs	r2, #0
 8001554:	602a      	str	r2, [r5, #0]
 8001556:	061a      	lsls	r2, r3, #24
 8001558:	d410      	bmi.n	800157c <__swhatbuf_r+0x40>
 800155a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800155e:	e00e      	b.n	800157e <__swhatbuf_r+0x42>
 8001560:	466a      	mov	r2, sp
 8001562:	f000 f8bb 	bl	80016dc <_fstat_r>
 8001566:	2800      	cmp	r0, #0
 8001568:	dbf1      	blt.n	800154e <__swhatbuf_r+0x12>
 800156a:	9a01      	ldr	r2, [sp, #4]
 800156c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001570:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001574:	425a      	negs	r2, r3
 8001576:	415a      	adcs	r2, r3
 8001578:	602a      	str	r2, [r5, #0]
 800157a:	e7ee      	b.n	800155a <__swhatbuf_r+0x1e>
 800157c:	2340      	movs	r3, #64	; 0x40
 800157e:	2000      	movs	r0, #0
 8001580:	6023      	str	r3, [r4, #0]
 8001582:	b016      	add	sp, #88	; 0x58
 8001584:	bd70      	pop	{r4, r5, r6, pc}
	...

08001588 <__smakebuf_r>:
 8001588:	898b      	ldrh	r3, [r1, #12]
 800158a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800158c:	079d      	lsls	r5, r3, #30
 800158e:	4606      	mov	r6, r0
 8001590:	460c      	mov	r4, r1
 8001592:	d507      	bpl.n	80015a4 <__smakebuf_r+0x1c>
 8001594:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001598:	6023      	str	r3, [r4, #0]
 800159a:	6123      	str	r3, [r4, #16]
 800159c:	2301      	movs	r3, #1
 800159e:	6163      	str	r3, [r4, #20]
 80015a0:	b002      	add	sp, #8
 80015a2:	bd70      	pop	{r4, r5, r6, pc}
 80015a4:	ab01      	add	r3, sp, #4
 80015a6:	466a      	mov	r2, sp
 80015a8:	f7ff ffc8 	bl	800153c <__swhatbuf_r>
 80015ac:	9900      	ldr	r1, [sp, #0]
 80015ae:	4605      	mov	r5, r0
 80015b0:	4630      	mov	r0, r6
 80015b2:	f7ff fa57 	bl	8000a64 <_malloc_r>
 80015b6:	b948      	cbnz	r0, 80015cc <__smakebuf_r+0x44>
 80015b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015bc:	059a      	lsls	r2, r3, #22
 80015be:	d4ef      	bmi.n	80015a0 <__smakebuf_r+0x18>
 80015c0:	f023 0303 	bic.w	r3, r3, #3
 80015c4:	f043 0302 	orr.w	r3, r3, #2
 80015c8:	81a3      	strh	r3, [r4, #12]
 80015ca:	e7e3      	b.n	8001594 <__smakebuf_r+0xc>
 80015cc:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <__smakebuf_r+0x7c>)
 80015ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80015d0:	89a3      	ldrh	r3, [r4, #12]
 80015d2:	6020      	str	r0, [r4, #0]
 80015d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015d8:	81a3      	strh	r3, [r4, #12]
 80015da:	9b00      	ldr	r3, [sp, #0]
 80015dc:	6163      	str	r3, [r4, #20]
 80015de:	9b01      	ldr	r3, [sp, #4]
 80015e0:	6120      	str	r0, [r4, #16]
 80015e2:	b15b      	cbz	r3, 80015fc <__smakebuf_r+0x74>
 80015e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80015e8:	4630      	mov	r0, r6
 80015ea:	f000 f889 	bl	8001700 <_isatty_r>
 80015ee:	b128      	cbz	r0, 80015fc <__smakebuf_r+0x74>
 80015f0:	89a3      	ldrh	r3, [r4, #12]
 80015f2:	f023 0303 	bic.w	r3, r3, #3
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	81a3      	strh	r3, [r4, #12]
 80015fc:	89a0      	ldrh	r0, [r4, #12]
 80015fe:	4305      	orrs	r5, r0
 8001600:	81a5      	strh	r5, [r4, #12]
 8001602:	e7cd      	b.n	80015a0 <__smakebuf_r+0x18>
 8001604:	0800087d 	.word	0x0800087d

08001608 <__malloc_lock>:
 8001608:	4801      	ldr	r0, [pc, #4]	; (8001610 <__malloc_lock+0x8>)
 800160a:	f7ff ba09 	b.w	8000a20 <__retarget_lock_acquire_recursive>
 800160e:	bf00      	nop
 8001610:	200000a0 	.word	0x200000a0

08001614 <__malloc_unlock>:
 8001614:	4801      	ldr	r0, [pc, #4]	; (800161c <__malloc_unlock+0x8>)
 8001616:	f7ff ba04 	b.w	8000a22 <__retarget_lock_release_recursive>
 800161a:	bf00      	nop
 800161c:	200000a0 	.word	0x200000a0

08001620 <_free_r>:
 8001620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001622:	2900      	cmp	r1, #0
 8001624:	d044      	beq.n	80016b0 <_free_r+0x90>
 8001626:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800162a:	9001      	str	r0, [sp, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	f1a1 0404 	sub.w	r4, r1, #4
 8001632:	bfb8      	it	lt
 8001634:	18e4      	addlt	r4, r4, r3
 8001636:	f7ff ffe7 	bl	8001608 <__malloc_lock>
 800163a:	4a1e      	ldr	r2, [pc, #120]	; (80016b4 <_free_r+0x94>)
 800163c:	9801      	ldr	r0, [sp, #4]
 800163e:	6813      	ldr	r3, [r2, #0]
 8001640:	b933      	cbnz	r3, 8001650 <_free_r+0x30>
 8001642:	6063      	str	r3, [r4, #4]
 8001644:	6014      	str	r4, [r2, #0]
 8001646:	b003      	add	sp, #12
 8001648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800164c:	f7ff bfe2 	b.w	8001614 <__malloc_unlock>
 8001650:	42a3      	cmp	r3, r4
 8001652:	d908      	bls.n	8001666 <_free_r+0x46>
 8001654:	6825      	ldr	r5, [r4, #0]
 8001656:	1961      	adds	r1, r4, r5
 8001658:	428b      	cmp	r3, r1
 800165a:	bf01      	itttt	eq
 800165c:	6819      	ldreq	r1, [r3, #0]
 800165e:	685b      	ldreq	r3, [r3, #4]
 8001660:	1949      	addeq	r1, r1, r5
 8001662:	6021      	streq	r1, [r4, #0]
 8001664:	e7ed      	b.n	8001642 <_free_r+0x22>
 8001666:	461a      	mov	r2, r3
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	b10b      	cbz	r3, 8001670 <_free_r+0x50>
 800166c:	42a3      	cmp	r3, r4
 800166e:	d9fa      	bls.n	8001666 <_free_r+0x46>
 8001670:	6811      	ldr	r1, [r2, #0]
 8001672:	1855      	adds	r5, r2, r1
 8001674:	42a5      	cmp	r5, r4
 8001676:	d10b      	bne.n	8001690 <_free_r+0x70>
 8001678:	6824      	ldr	r4, [r4, #0]
 800167a:	4421      	add	r1, r4
 800167c:	1854      	adds	r4, r2, r1
 800167e:	42a3      	cmp	r3, r4
 8001680:	6011      	str	r1, [r2, #0]
 8001682:	d1e0      	bne.n	8001646 <_free_r+0x26>
 8001684:	681c      	ldr	r4, [r3, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	6053      	str	r3, [r2, #4]
 800168a:	4421      	add	r1, r4
 800168c:	6011      	str	r1, [r2, #0]
 800168e:	e7da      	b.n	8001646 <_free_r+0x26>
 8001690:	d902      	bls.n	8001698 <_free_r+0x78>
 8001692:	230c      	movs	r3, #12
 8001694:	6003      	str	r3, [r0, #0]
 8001696:	e7d6      	b.n	8001646 <_free_r+0x26>
 8001698:	6825      	ldr	r5, [r4, #0]
 800169a:	1961      	adds	r1, r4, r5
 800169c:	428b      	cmp	r3, r1
 800169e:	bf04      	itt	eq
 80016a0:	6819      	ldreq	r1, [r3, #0]
 80016a2:	685b      	ldreq	r3, [r3, #4]
 80016a4:	6063      	str	r3, [r4, #4]
 80016a6:	bf04      	itt	eq
 80016a8:	1949      	addeq	r1, r1, r5
 80016aa:	6021      	streq	r1, [r4, #0]
 80016ac:	6054      	str	r4, [r2, #4]
 80016ae:	e7ca      	b.n	8001646 <_free_r+0x26>
 80016b0:	b003      	add	sp, #12
 80016b2:	bd30      	pop	{r4, r5, pc}
 80016b4:	200000a4 	.word	0x200000a4

080016b8 <_read_r>:
 80016b8:	b538      	push	{r3, r4, r5, lr}
 80016ba:	4d07      	ldr	r5, [pc, #28]	; (80016d8 <_read_r+0x20>)
 80016bc:	4604      	mov	r4, r0
 80016be:	4608      	mov	r0, r1
 80016c0:	4611      	mov	r1, r2
 80016c2:	2200      	movs	r2, #0
 80016c4:	602a      	str	r2, [r5, #0]
 80016c6:	461a      	mov	r2, r3
 80016c8:	f7fe feec 	bl	80004a4 <_read>
 80016cc:	1c43      	adds	r3, r0, #1
 80016ce:	d102      	bne.n	80016d6 <_read_r+0x1e>
 80016d0:	682b      	ldr	r3, [r5, #0]
 80016d2:	b103      	cbz	r3, 80016d6 <_read_r+0x1e>
 80016d4:	6023      	str	r3, [r4, #0]
 80016d6:	bd38      	pop	{r3, r4, r5, pc}
 80016d8:	200000ac 	.word	0x200000ac

080016dc <_fstat_r>:
 80016dc:	b538      	push	{r3, r4, r5, lr}
 80016de:	4d07      	ldr	r5, [pc, #28]	; (80016fc <_fstat_r+0x20>)
 80016e0:	2300      	movs	r3, #0
 80016e2:	4604      	mov	r4, r0
 80016e4:	4608      	mov	r0, r1
 80016e6:	4611      	mov	r1, r2
 80016e8:	602b      	str	r3, [r5, #0]
 80016ea:	f7fe ff20 	bl	800052e <_fstat>
 80016ee:	1c43      	adds	r3, r0, #1
 80016f0:	d102      	bne.n	80016f8 <_fstat_r+0x1c>
 80016f2:	682b      	ldr	r3, [r5, #0]
 80016f4:	b103      	cbz	r3, 80016f8 <_fstat_r+0x1c>
 80016f6:	6023      	str	r3, [r4, #0]
 80016f8:	bd38      	pop	{r3, r4, r5, pc}
 80016fa:	bf00      	nop
 80016fc:	200000ac 	.word	0x200000ac

08001700 <_isatty_r>:
 8001700:	b538      	push	{r3, r4, r5, lr}
 8001702:	4d06      	ldr	r5, [pc, #24]	; (800171c <_isatty_r+0x1c>)
 8001704:	2300      	movs	r3, #0
 8001706:	4604      	mov	r4, r0
 8001708:	4608      	mov	r0, r1
 800170a:	602b      	str	r3, [r5, #0]
 800170c:	f7fe ff1f 	bl	800054e <_isatty>
 8001710:	1c43      	adds	r3, r0, #1
 8001712:	d102      	bne.n	800171a <_isatty_r+0x1a>
 8001714:	682b      	ldr	r3, [r5, #0]
 8001716:	b103      	cbz	r3, 800171a <_isatty_r+0x1a>
 8001718:	6023      	str	r3, [r4, #0]
 800171a:	bd38      	pop	{r3, r4, r5, pc}
 800171c:	200000ac 	.word	0x200000ac

08001720 <_init>:
 8001720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001722:	bf00      	nop
 8001724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001726:	bc08      	pop	{r3}
 8001728:	469e      	mov	lr, r3
 800172a:	4770      	bx	lr

0800172c <_fini>:
 800172c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800172e:	bf00      	nop
 8001730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001732:	bc08      	pop	{r3}
 8001734:	469e      	mov	lr, r3
 8001736:	4770      	bx	lr
