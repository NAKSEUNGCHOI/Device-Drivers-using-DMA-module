
3_WorkingWithITM-printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d6c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08000f04  08000f04  00010f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f84  08000f84  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08000f84  08000f84  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f84  08000f84  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f84  08000f84  00010f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f88  08000f88  00010f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08000f8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000068  08000ff4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08000ff4  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001be5  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007c1  00000000  00000000  00021c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000298  00000000  00000000  00022440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000230  00000000  00000000  000226d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001897  00000000  00000000  00022908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002e23  00000000  00000000  0002419f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085a3e  00000000  00000000  00026fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000aca00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f0c  00000000  00000000  000aca50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000068 	.word	0x20000068
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000eec 	.word	0x08000eec

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000006c 	.word	0x2000006c
 80001d4:	08000eec 	.word	0x08000eec

080001d8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001e4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80001e8:	f003 0301 	and.w	r3, r3, #1
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d013      	beq.n	8000218 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80001f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001f4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80001f8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d00b      	beq.n	8000218 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000200:	e000      	b.n	8000204 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000202:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000204:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d0f9      	beq.n	8000202 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800020e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000212:	687a      	ldr	r2, [r7, #4]
 8000214:	b2d2      	uxtb	r2, r2
 8000216:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000218:	687b      	ldr	r3, [r7, #4]
}
 800021a:	4618      	mov	r0, r3
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr

08000226 <__io_putchar>:
char *pt_a = _a;

char hello[] = "Hello from main";
char *p_hello = hello;

int __io_putchar(int ch){
 8000226:	b580      	push	{r7, lr}
 8000228:	b082      	sub	sp, #8
 800022a:	af00      	add	r7, sp, #0
 800022c:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	4618      	mov	r0, r3
 8000232:	f7ff ffd1 	bl	80001d8 <ITM_SendChar>
	return ch;
 8000236:	687b      	ldr	r3, [r7, #4]
}
 8000238:	4618      	mov	r0, r3
 800023a:	3708      	adds	r7, #8
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}

08000240 <main>:

int main(void){
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0

	printf("printf is not available.\n");
 8000244:	4801      	ldr	r0, [pc, #4]	; (800024c <main+0xc>)
 8000246:	f000 f9c1 	bl	80005cc <puts>

	while(1){
 800024a:	e7fe      	b.n	800024a <main+0xa>
 800024c:	08000f04 	.word	0x08000f04

08000250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000254:	e7fe      	b.n	8000254 <NMI_Handler+0x4>

08000256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000256:	b480      	push	{r7}
 8000258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800025a:	e7fe      	b.n	800025a <HardFault_Handler+0x4>

0800025c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000260:	e7fe      	b.n	8000260 <MemManage_Handler+0x4>

08000262 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000262:	b480      	push	{r7}
 8000264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000266:	e7fe      	b.n	8000266 <BusFault_Handler+0x4>

08000268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800026c:	e7fe      	b.n	800026c <UsageFault_Handler+0x4>

0800026e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800026e:	b480      	push	{r7}
 8000270:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000272:	bf00      	nop
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr

0800027c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000280:	bf00      	nop
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr

0800028a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800028a:	b480      	push	{r7}
 800028c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800028e:	bf00      	nop
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr

08000298 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800029c:	f000 f8e2 	bl	8000464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002a0:	bf00      	nop
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b086      	sub	sp, #24
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	60f8      	str	r0, [r7, #12]
 80002ac:	60b9      	str	r1, [r7, #8]
 80002ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002b0:	2300      	movs	r3, #0
 80002b2:	617b      	str	r3, [r7, #20]
 80002b4:	e00a      	b.n	80002cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80002b6:	f3af 8000 	nop.w
 80002ba:	4601      	mov	r1, r0
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	1c5a      	adds	r2, r3, #1
 80002c0:	60ba      	str	r2, [r7, #8]
 80002c2:	b2ca      	uxtb	r2, r1
 80002c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002c6:	697b      	ldr	r3, [r7, #20]
 80002c8:	3301      	adds	r3, #1
 80002ca:	617b      	str	r3, [r7, #20]
 80002cc:	697a      	ldr	r2, [r7, #20]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	429a      	cmp	r2, r3
 80002d2:	dbf0      	blt.n	80002b6 <_read+0x12>
	}

return len;
 80002d4:	687b      	ldr	r3, [r7, #4]
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3718      	adds	r7, #24
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}

080002de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80002de:	b580      	push	{r7, lr}
 80002e0:	b086      	sub	sp, #24
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	60f8      	str	r0, [r7, #12]
 80002e6:	60b9      	str	r1, [r7, #8]
 80002e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002ea:	2300      	movs	r3, #0
 80002ec:	617b      	str	r3, [r7, #20]
 80002ee:	e009      	b.n	8000304 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80002f0:	68bb      	ldr	r3, [r7, #8]
 80002f2:	1c5a      	adds	r2, r3, #1
 80002f4:	60ba      	str	r2, [r7, #8]
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	4618      	mov	r0, r3
 80002fa:	f7ff ff94 	bl	8000226 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002fe:	697b      	ldr	r3, [r7, #20]
 8000300:	3301      	adds	r3, #1
 8000302:	617b      	str	r3, [r7, #20]
 8000304:	697a      	ldr	r2, [r7, #20]
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	429a      	cmp	r2, r3
 800030a:	dbf1      	blt.n	80002f0 <_write+0x12>
	}
	return len;
 800030c:	687b      	ldr	r3, [r7, #4]
}
 800030e:	4618      	mov	r0, r3
 8000310:	3718      	adds	r7, #24
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}

08000316 <_close>:

int _close(int file)
{
 8000316:	b480      	push	{r7}
 8000318:	b083      	sub	sp, #12
 800031a:	af00      	add	r7, sp, #0
 800031c:	6078      	str	r0, [r7, #4]
	return -1;
 800031e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000322:	4618      	mov	r0, r3
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr

0800032e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800032e:	b480      	push	{r7}
 8000330:	b083      	sub	sp, #12
 8000332:	af00      	add	r7, sp, #0
 8000334:	6078      	str	r0, [r7, #4]
 8000336:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800033e:	605a      	str	r2, [r3, #4]
	return 0;
 8000340:	2300      	movs	r3, #0
}
 8000342:	4618      	mov	r0, r3
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr

0800034e <_isatty>:

int _isatty(int file)
{
 800034e:	b480      	push	{r7}
 8000350:	b083      	sub	sp, #12
 8000352:	af00      	add	r7, sp, #0
 8000354:	6078      	str	r0, [r7, #4]
	return 1;
 8000356:	2301      	movs	r3, #1
}
 8000358:	4618      	mov	r0, r3
 800035a:	370c      	adds	r7, #12
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr

08000364 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
 800036a:	60f8      	str	r0, [r7, #12]
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	607a      	str	r2, [r7, #4]
	return 0;
 8000370:	2300      	movs	r3, #0
}
 8000372:	4618      	mov	r0, r3
 8000374:	3714      	adds	r7, #20
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr
	...

08000380 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000388:	4a14      	ldr	r2, [pc, #80]	; (80003dc <_sbrk+0x5c>)
 800038a:	4b15      	ldr	r3, [pc, #84]	; (80003e0 <_sbrk+0x60>)
 800038c:	1ad3      	subs	r3, r2, r3
 800038e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000394:	4b13      	ldr	r3, [pc, #76]	; (80003e4 <_sbrk+0x64>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d102      	bne.n	80003a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <_sbrk+0x64>)
 800039e:	4a12      	ldr	r2, [pc, #72]	; (80003e8 <_sbrk+0x68>)
 80003a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <_sbrk+0x64>)
 80003a4:	681a      	ldr	r2, [r3, #0]
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4413      	add	r3, r2
 80003aa:	693a      	ldr	r2, [r7, #16]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d207      	bcs.n	80003c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003b0:	f000 f86c 	bl	800048c <__errno>
 80003b4:	4603      	mov	r3, r0
 80003b6:	220c      	movs	r2, #12
 80003b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003ba:	f04f 33ff 	mov.w	r3, #4294967295
 80003be:	e009      	b.n	80003d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003c0:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <_sbrk+0x64>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003c6:	4b07      	ldr	r3, [pc, #28]	; (80003e4 <_sbrk+0x64>)
 80003c8:	681a      	ldr	r2, [r3, #0]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4413      	add	r3, r2
 80003ce:	4a05      	ldr	r2, [pc, #20]	; (80003e4 <_sbrk+0x64>)
 80003d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003d2:	68fb      	ldr	r3, [r7, #12]
}
 80003d4:	4618      	mov	r0, r3
 80003d6:	3718      	adds	r7, #24
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	20020000 	.word	0x20020000
 80003e0:	00000400 	.word	0x00000400
 80003e4:	20000084 	.word	0x20000084
 80003e8:	200000a0 	.word	0x200000a0

080003ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003f0:	4b06      	ldr	r3, [pc, #24]	; (800040c <SystemInit+0x20>)
 80003f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003f6:	4a05      	ldr	r2, [pc, #20]	; (800040c <SystemInit+0x20>)
 80003f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	e000ed00 	.word	0xe000ed00

08000410 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000410:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000448 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000414:	480d      	ldr	r0, [pc, #52]	; (800044c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000416:	490e      	ldr	r1, [pc, #56]	; (8000450 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000418:	4a0e      	ldr	r2, [pc, #56]	; (8000454 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800041a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800041c:	e002      	b.n	8000424 <LoopCopyDataInit>

0800041e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800041e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000422:	3304      	adds	r3, #4

08000424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000428:	d3f9      	bcc.n	800041e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800042a:	4a0b      	ldr	r2, [pc, #44]	; (8000458 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800042c:	4c0b      	ldr	r4, [pc, #44]	; (800045c <LoopFillZerobss+0x26>)
  movs r3, #0
 800042e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000430:	e001      	b.n	8000436 <LoopFillZerobss>

08000432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000434:	3204      	adds	r2, #4

08000436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000438:	d3fb      	bcc.n	8000432 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800043a:	f7ff ffd7 	bl	80003ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800043e:	f000 f82b 	bl	8000498 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000442:	f7ff fefd 	bl	8000240 <main>
  bx  lr    
 8000446:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000448:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800044c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000450:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000454:	08000f8c 	.word	0x08000f8c
  ldr r2, =_sbss
 8000458:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800045c:	2000009c 	.word	0x2000009c

08000460 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000460:	e7fe      	b.n	8000460 <ADC_IRQHandler>
	...

08000464 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000468:	4b06      	ldr	r3, [pc, #24]	; (8000484 <HAL_IncTick+0x20>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	461a      	mov	r2, r3
 800046e:	4b06      	ldr	r3, [pc, #24]	; (8000488 <HAL_IncTick+0x24>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4413      	add	r3, r2
 8000474:	4a04      	ldr	r2, [pc, #16]	; (8000488 <HAL_IncTick+0x24>)
 8000476:	6013      	str	r3, [r2, #0]
}
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	20000000 	.word	0x20000000
 8000488:	20000088 	.word	0x20000088

0800048c <__errno>:
 800048c:	4b01      	ldr	r3, [pc, #4]	; (8000494 <__errno+0x8>)
 800048e:	6818      	ldr	r0, [r3, #0]
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	20000004 	.word	0x20000004

08000498 <__libc_init_array>:
 8000498:	b570      	push	{r4, r5, r6, lr}
 800049a:	4d0d      	ldr	r5, [pc, #52]	; (80004d0 <__libc_init_array+0x38>)
 800049c:	4c0d      	ldr	r4, [pc, #52]	; (80004d4 <__libc_init_array+0x3c>)
 800049e:	1b64      	subs	r4, r4, r5
 80004a0:	10a4      	asrs	r4, r4, #2
 80004a2:	2600      	movs	r6, #0
 80004a4:	42a6      	cmp	r6, r4
 80004a6:	d109      	bne.n	80004bc <__libc_init_array+0x24>
 80004a8:	4d0b      	ldr	r5, [pc, #44]	; (80004d8 <__libc_init_array+0x40>)
 80004aa:	4c0c      	ldr	r4, [pc, #48]	; (80004dc <__libc_init_array+0x44>)
 80004ac:	f000 fd1e 	bl	8000eec <_init>
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	10a4      	asrs	r4, r4, #2
 80004b4:	2600      	movs	r6, #0
 80004b6:	42a6      	cmp	r6, r4
 80004b8:	d105      	bne.n	80004c6 <__libc_init_array+0x2e>
 80004ba:	bd70      	pop	{r4, r5, r6, pc}
 80004bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80004c0:	4798      	blx	r3
 80004c2:	3601      	adds	r6, #1
 80004c4:	e7ee      	b.n	80004a4 <__libc_init_array+0xc>
 80004c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ca:	4798      	blx	r3
 80004cc:	3601      	adds	r6, #1
 80004ce:	e7f2      	b.n	80004b6 <__libc_init_array+0x1e>
 80004d0:	08000f84 	.word	0x08000f84
 80004d4:	08000f84 	.word	0x08000f84
 80004d8:	08000f84 	.word	0x08000f84
 80004dc:	08000f88 	.word	0x08000f88

080004e0 <memset>:
 80004e0:	4402      	add	r2, r0
 80004e2:	4603      	mov	r3, r0
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d100      	bne.n	80004ea <memset+0xa>
 80004e8:	4770      	bx	lr
 80004ea:	f803 1b01 	strb.w	r1, [r3], #1
 80004ee:	e7f9      	b.n	80004e4 <memset+0x4>

080004f0 <_puts_r>:
 80004f0:	b570      	push	{r4, r5, r6, lr}
 80004f2:	460e      	mov	r6, r1
 80004f4:	4605      	mov	r5, r0
 80004f6:	b118      	cbz	r0, 8000500 <_puts_r+0x10>
 80004f8:	6983      	ldr	r3, [r0, #24]
 80004fa:	b90b      	cbnz	r3, 8000500 <_puts_r+0x10>
 80004fc:	f000 fa48 	bl	8000990 <__sinit>
 8000500:	69ab      	ldr	r3, [r5, #24]
 8000502:	68ac      	ldr	r4, [r5, #8]
 8000504:	b913      	cbnz	r3, 800050c <_puts_r+0x1c>
 8000506:	4628      	mov	r0, r5
 8000508:	f000 fa42 	bl	8000990 <__sinit>
 800050c:	4b2c      	ldr	r3, [pc, #176]	; (80005c0 <_puts_r+0xd0>)
 800050e:	429c      	cmp	r4, r3
 8000510:	d120      	bne.n	8000554 <_puts_r+0x64>
 8000512:	686c      	ldr	r4, [r5, #4]
 8000514:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000516:	07db      	lsls	r3, r3, #31
 8000518:	d405      	bmi.n	8000526 <_puts_r+0x36>
 800051a:	89a3      	ldrh	r3, [r4, #12]
 800051c:	0598      	lsls	r0, r3, #22
 800051e:	d402      	bmi.n	8000526 <_puts_r+0x36>
 8000520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000522:	f000 fad3 	bl	8000acc <__retarget_lock_acquire_recursive>
 8000526:	89a3      	ldrh	r3, [r4, #12]
 8000528:	0719      	lsls	r1, r3, #28
 800052a:	d51d      	bpl.n	8000568 <_puts_r+0x78>
 800052c:	6923      	ldr	r3, [r4, #16]
 800052e:	b1db      	cbz	r3, 8000568 <_puts_r+0x78>
 8000530:	3e01      	subs	r6, #1
 8000532:	68a3      	ldr	r3, [r4, #8]
 8000534:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000538:	3b01      	subs	r3, #1
 800053a:	60a3      	str	r3, [r4, #8]
 800053c:	bb39      	cbnz	r1, 800058e <_puts_r+0x9e>
 800053e:	2b00      	cmp	r3, #0
 8000540:	da38      	bge.n	80005b4 <_puts_r+0xc4>
 8000542:	4622      	mov	r2, r4
 8000544:	210a      	movs	r1, #10
 8000546:	4628      	mov	r0, r5
 8000548:	f000 f848 	bl	80005dc <__swbuf_r>
 800054c:	3001      	adds	r0, #1
 800054e:	d011      	beq.n	8000574 <_puts_r+0x84>
 8000550:	250a      	movs	r5, #10
 8000552:	e011      	b.n	8000578 <_puts_r+0x88>
 8000554:	4b1b      	ldr	r3, [pc, #108]	; (80005c4 <_puts_r+0xd4>)
 8000556:	429c      	cmp	r4, r3
 8000558:	d101      	bne.n	800055e <_puts_r+0x6e>
 800055a:	68ac      	ldr	r4, [r5, #8]
 800055c:	e7da      	b.n	8000514 <_puts_r+0x24>
 800055e:	4b1a      	ldr	r3, [pc, #104]	; (80005c8 <_puts_r+0xd8>)
 8000560:	429c      	cmp	r4, r3
 8000562:	bf08      	it	eq
 8000564:	68ec      	ldreq	r4, [r5, #12]
 8000566:	e7d5      	b.n	8000514 <_puts_r+0x24>
 8000568:	4621      	mov	r1, r4
 800056a:	4628      	mov	r0, r5
 800056c:	f000 f888 	bl	8000680 <__swsetup_r>
 8000570:	2800      	cmp	r0, #0
 8000572:	d0dd      	beq.n	8000530 <_puts_r+0x40>
 8000574:	f04f 35ff 	mov.w	r5, #4294967295
 8000578:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800057a:	07da      	lsls	r2, r3, #31
 800057c:	d405      	bmi.n	800058a <_puts_r+0x9a>
 800057e:	89a3      	ldrh	r3, [r4, #12]
 8000580:	059b      	lsls	r3, r3, #22
 8000582:	d402      	bmi.n	800058a <_puts_r+0x9a>
 8000584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000586:	f000 faa2 	bl	8000ace <__retarget_lock_release_recursive>
 800058a:	4628      	mov	r0, r5
 800058c:	bd70      	pop	{r4, r5, r6, pc}
 800058e:	2b00      	cmp	r3, #0
 8000590:	da04      	bge.n	800059c <_puts_r+0xac>
 8000592:	69a2      	ldr	r2, [r4, #24]
 8000594:	429a      	cmp	r2, r3
 8000596:	dc06      	bgt.n	80005a6 <_puts_r+0xb6>
 8000598:	290a      	cmp	r1, #10
 800059a:	d004      	beq.n	80005a6 <_puts_r+0xb6>
 800059c:	6823      	ldr	r3, [r4, #0]
 800059e:	1c5a      	adds	r2, r3, #1
 80005a0:	6022      	str	r2, [r4, #0]
 80005a2:	7019      	strb	r1, [r3, #0]
 80005a4:	e7c5      	b.n	8000532 <_puts_r+0x42>
 80005a6:	4622      	mov	r2, r4
 80005a8:	4628      	mov	r0, r5
 80005aa:	f000 f817 	bl	80005dc <__swbuf_r>
 80005ae:	3001      	adds	r0, #1
 80005b0:	d1bf      	bne.n	8000532 <_puts_r+0x42>
 80005b2:	e7df      	b.n	8000574 <_puts_r+0x84>
 80005b4:	6823      	ldr	r3, [r4, #0]
 80005b6:	250a      	movs	r5, #10
 80005b8:	1c5a      	adds	r2, r3, #1
 80005ba:	6022      	str	r2, [r4, #0]
 80005bc:	701d      	strb	r5, [r3, #0]
 80005be:	e7db      	b.n	8000578 <_puts_r+0x88>
 80005c0:	08000f44 	.word	0x08000f44
 80005c4:	08000f64 	.word	0x08000f64
 80005c8:	08000f24 	.word	0x08000f24

080005cc <puts>:
 80005cc:	4b02      	ldr	r3, [pc, #8]	; (80005d8 <puts+0xc>)
 80005ce:	4601      	mov	r1, r0
 80005d0:	6818      	ldr	r0, [r3, #0]
 80005d2:	f7ff bf8d 	b.w	80004f0 <_puts_r>
 80005d6:	bf00      	nop
 80005d8:	20000004 	.word	0x20000004

080005dc <__swbuf_r>:
 80005dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005de:	460e      	mov	r6, r1
 80005e0:	4614      	mov	r4, r2
 80005e2:	4605      	mov	r5, r0
 80005e4:	b118      	cbz	r0, 80005ee <__swbuf_r+0x12>
 80005e6:	6983      	ldr	r3, [r0, #24]
 80005e8:	b90b      	cbnz	r3, 80005ee <__swbuf_r+0x12>
 80005ea:	f000 f9d1 	bl	8000990 <__sinit>
 80005ee:	4b21      	ldr	r3, [pc, #132]	; (8000674 <__swbuf_r+0x98>)
 80005f0:	429c      	cmp	r4, r3
 80005f2:	d12b      	bne.n	800064c <__swbuf_r+0x70>
 80005f4:	686c      	ldr	r4, [r5, #4]
 80005f6:	69a3      	ldr	r3, [r4, #24]
 80005f8:	60a3      	str	r3, [r4, #8]
 80005fa:	89a3      	ldrh	r3, [r4, #12]
 80005fc:	071a      	lsls	r2, r3, #28
 80005fe:	d52f      	bpl.n	8000660 <__swbuf_r+0x84>
 8000600:	6923      	ldr	r3, [r4, #16]
 8000602:	b36b      	cbz	r3, 8000660 <__swbuf_r+0x84>
 8000604:	6923      	ldr	r3, [r4, #16]
 8000606:	6820      	ldr	r0, [r4, #0]
 8000608:	1ac0      	subs	r0, r0, r3
 800060a:	6963      	ldr	r3, [r4, #20]
 800060c:	b2f6      	uxtb	r6, r6
 800060e:	4283      	cmp	r3, r0
 8000610:	4637      	mov	r7, r6
 8000612:	dc04      	bgt.n	800061e <__swbuf_r+0x42>
 8000614:	4621      	mov	r1, r4
 8000616:	4628      	mov	r0, r5
 8000618:	f000 f926 	bl	8000868 <_fflush_r>
 800061c:	bb30      	cbnz	r0, 800066c <__swbuf_r+0x90>
 800061e:	68a3      	ldr	r3, [r4, #8]
 8000620:	3b01      	subs	r3, #1
 8000622:	60a3      	str	r3, [r4, #8]
 8000624:	6823      	ldr	r3, [r4, #0]
 8000626:	1c5a      	adds	r2, r3, #1
 8000628:	6022      	str	r2, [r4, #0]
 800062a:	701e      	strb	r6, [r3, #0]
 800062c:	6963      	ldr	r3, [r4, #20]
 800062e:	3001      	adds	r0, #1
 8000630:	4283      	cmp	r3, r0
 8000632:	d004      	beq.n	800063e <__swbuf_r+0x62>
 8000634:	89a3      	ldrh	r3, [r4, #12]
 8000636:	07db      	lsls	r3, r3, #31
 8000638:	d506      	bpl.n	8000648 <__swbuf_r+0x6c>
 800063a:	2e0a      	cmp	r6, #10
 800063c:	d104      	bne.n	8000648 <__swbuf_r+0x6c>
 800063e:	4621      	mov	r1, r4
 8000640:	4628      	mov	r0, r5
 8000642:	f000 f911 	bl	8000868 <_fflush_r>
 8000646:	b988      	cbnz	r0, 800066c <__swbuf_r+0x90>
 8000648:	4638      	mov	r0, r7
 800064a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <__swbuf_r+0x9c>)
 800064e:	429c      	cmp	r4, r3
 8000650:	d101      	bne.n	8000656 <__swbuf_r+0x7a>
 8000652:	68ac      	ldr	r4, [r5, #8]
 8000654:	e7cf      	b.n	80005f6 <__swbuf_r+0x1a>
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <__swbuf_r+0xa0>)
 8000658:	429c      	cmp	r4, r3
 800065a:	bf08      	it	eq
 800065c:	68ec      	ldreq	r4, [r5, #12]
 800065e:	e7ca      	b.n	80005f6 <__swbuf_r+0x1a>
 8000660:	4621      	mov	r1, r4
 8000662:	4628      	mov	r0, r5
 8000664:	f000 f80c 	bl	8000680 <__swsetup_r>
 8000668:	2800      	cmp	r0, #0
 800066a:	d0cb      	beq.n	8000604 <__swbuf_r+0x28>
 800066c:	f04f 37ff 	mov.w	r7, #4294967295
 8000670:	e7ea      	b.n	8000648 <__swbuf_r+0x6c>
 8000672:	bf00      	nop
 8000674:	08000f44 	.word	0x08000f44
 8000678:	08000f64 	.word	0x08000f64
 800067c:	08000f24 	.word	0x08000f24

08000680 <__swsetup_r>:
 8000680:	4b32      	ldr	r3, [pc, #200]	; (800074c <__swsetup_r+0xcc>)
 8000682:	b570      	push	{r4, r5, r6, lr}
 8000684:	681d      	ldr	r5, [r3, #0]
 8000686:	4606      	mov	r6, r0
 8000688:	460c      	mov	r4, r1
 800068a:	b125      	cbz	r5, 8000696 <__swsetup_r+0x16>
 800068c:	69ab      	ldr	r3, [r5, #24]
 800068e:	b913      	cbnz	r3, 8000696 <__swsetup_r+0x16>
 8000690:	4628      	mov	r0, r5
 8000692:	f000 f97d 	bl	8000990 <__sinit>
 8000696:	4b2e      	ldr	r3, [pc, #184]	; (8000750 <__swsetup_r+0xd0>)
 8000698:	429c      	cmp	r4, r3
 800069a:	d10f      	bne.n	80006bc <__swsetup_r+0x3c>
 800069c:	686c      	ldr	r4, [r5, #4]
 800069e:	89a3      	ldrh	r3, [r4, #12]
 80006a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80006a4:	0719      	lsls	r1, r3, #28
 80006a6:	d42c      	bmi.n	8000702 <__swsetup_r+0x82>
 80006a8:	06dd      	lsls	r5, r3, #27
 80006aa:	d411      	bmi.n	80006d0 <__swsetup_r+0x50>
 80006ac:	2309      	movs	r3, #9
 80006ae:	6033      	str	r3, [r6, #0]
 80006b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80006b4:	81a3      	strh	r3, [r4, #12]
 80006b6:	f04f 30ff 	mov.w	r0, #4294967295
 80006ba:	e03e      	b.n	800073a <__swsetup_r+0xba>
 80006bc:	4b25      	ldr	r3, [pc, #148]	; (8000754 <__swsetup_r+0xd4>)
 80006be:	429c      	cmp	r4, r3
 80006c0:	d101      	bne.n	80006c6 <__swsetup_r+0x46>
 80006c2:	68ac      	ldr	r4, [r5, #8]
 80006c4:	e7eb      	b.n	800069e <__swsetup_r+0x1e>
 80006c6:	4b24      	ldr	r3, [pc, #144]	; (8000758 <__swsetup_r+0xd8>)
 80006c8:	429c      	cmp	r4, r3
 80006ca:	bf08      	it	eq
 80006cc:	68ec      	ldreq	r4, [r5, #12]
 80006ce:	e7e6      	b.n	800069e <__swsetup_r+0x1e>
 80006d0:	0758      	lsls	r0, r3, #29
 80006d2:	d512      	bpl.n	80006fa <__swsetup_r+0x7a>
 80006d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80006d6:	b141      	cbz	r1, 80006ea <__swsetup_r+0x6a>
 80006d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80006dc:	4299      	cmp	r1, r3
 80006de:	d002      	beq.n	80006e6 <__swsetup_r+0x66>
 80006e0:	4630      	mov	r0, r6
 80006e2:	f000 fa5b 	bl	8000b9c <_free_r>
 80006e6:	2300      	movs	r3, #0
 80006e8:	6363      	str	r3, [r4, #52]	; 0x34
 80006ea:	89a3      	ldrh	r3, [r4, #12]
 80006ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80006f0:	81a3      	strh	r3, [r4, #12]
 80006f2:	2300      	movs	r3, #0
 80006f4:	6063      	str	r3, [r4, #4]
 80006f6:	6923      	ldr	r3, [r4, #16]
 80006f8:	6023      	str	r3, [r4, #0]
 80006fa:	89a3      	ldrh	r3, [r4, #12]
 80006fc:	f043 0308 	orr.w	r3, r3, #8
 8000700:	81a3      	strh	r3, [r4, #12]
 8000702:	6923      	ldr	r3, [r4, #16]
 8000704:	b94b      	cbnz	r3, 800071a <__swsetup_r+0x9a>
 8000706:	89a3      	ldrh	r3, [r4, #12]
 8000708:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800070c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000710:	d003      	beq.n	800071a <__swsetup_r+0x9a>
 8000712:	4621      	mov	r1, r4
 8000714:	4630      	mov	r0, r6
 8000716:	f000 fa01 	bl	8000b1c <__smakebuf_r>
 800071a:	89a0      	ldrh	r0, [r4, #12]
 800071c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000720:	f010 0301 	ands.w	r3, r0, #1
 8000724:	d00a      	beq.n	800073c <__swsetup_r+0xbc>
 8000726:	2300      	movs	r3, #0
 8000728:	60a3      	str	r3, [r4, #8]
 800072a:	6963      	ldr	r3, [r4, #20]
 800072c:	425b      	negs	r3, r3
 800072e:	61a3      	str	r3, [r4, #24]
 8000730:	6923      	ldr	r3, [r4, #16]
 8000732:	b943      	cbnz	r3, 8000746 <__swsetup_r+0xc6>
 8000734:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000738:	d1ba      	bne.n	80006b0 <__swsetup_r+0x30>
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	0781      	lsls	r1, r0, #30
 800073e:	bf58      	it	pl
 8000740:	6963      	ldrpl	r3, [r4, #20]
 8000742:	60a3      	str	r3, [r4, #8]
 8000744:	e7f4      	b.n	8000730 <__swsetup_r+0xb0>
 8000746:	2000      	movs	r0, #0
 8000748:	e7f7      	b.n	800073a <__swsetup_r+0xba>
 800074a:	bf00      	nop
 800074c:	20000004 	.word	0x20000004
 8000750:	08000f44 	.word	0x08000f44
 8000754:	08000f64 	.word	0x08000f64
 8000758:	08000f24 	.word	0x08000f24

0800075c <__sflush_r>:
 800075c:	898a      	ldrh	r2, [r1, #12]
 800075e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000762:	4605      	mov	r5, r0
 8000764:	0710      	lsls	r0, r2, #28
 8000766:	460c      	mov	r4, r1
 8000768:	d458      	bmi.n	800081c <__sflush_r+0xc0>
 800076a:	684b      	ldr	r3, [r1, #4]
 800076c:	2b00      	cmp	r3, #0
 800076e:	dc05      	bgt.n	800077c <__sflush_r+0x20>
 8000770:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000772:	2b00      	cmp	r3, #0
 8000774:	dc02      	bgt.n	800077c <__sflush_r+0x20>
 8000776:	2000      	movs	r0, #0
 8000778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800077c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800077e:	2e00      	cmp	r6, #0
 8000780:	d0f9      	beq.n	8000776 <__sflush_r+0x1a>
 8000782:	2300      	movs	r3, #0
 8000784:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000788:	682f      	ldr	r7, [r5, #0]
 800078a:	602b      	str	r3, [r5, #0]
 800078c:	d032      	beq.n	80007f4 <__sflush_r+0x98>
 800078e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000790:	89a3      	ldrh	r3, [r4, #12]
 8000792:	075a      	lsls	r2, r3, #29
 8000794:	d505      	bpl.n	80007a2 <__sflush_r+0x46>
 8000796:	6863      	ldr	r3, [r4, #4]
 8000798:	1ac0      	subs	r0, r0, r3
 800079a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800079c:	b10b      	cbz	r3, 80007a2 <__sflush_r+0x46>
 800079e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007a0:	1ac0      	subs	r0, r0, r3
 80007a2:	2300      	movs	r3, #0
 80007a4:	4602      	mov	r2, r0
 80007a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80007a8:	6a21      	ldr	r1, [r4, #32]
 80007aa:	4628      	mov	r0, r5
 80007ac:	47b0      	blx	r6
 80007ae:	1c43      	adds	r3, r0, #1
 80007b0:	89a3      	ldrh	r3, [r4, #12]
 80007b2:	d106      	bne.n	80007c2 <__sflush_r+0x66>
 80007b4:	6829      	ldr	r1, [r5, #0]
 80007b6:	291d      	cmp	r1, #29
 80007b8:	d82c      	bhi.n	8000814 <__sflush_r+0xb8>
 80007ba:	4a2a      	ldr	r2, [pc, #168]	; (8000864 <__sflush_r+0x108>)
 80007bc:	40ca      	lsrs	r2, r1
 80007be:	07d6      	lsls	r6, r2, #31
 80007c0:	d528      	bpl.n	8000814 <__sflush_r+0xb8>
 80007c2:	2200      	movs	r2, #0
 80007c4:	6062      	str	r2, [r4, #4]
 80007c6:	04d9      	lsls	r1, r3, #19
 80007c8:	6922      	ldr	r2, [r4, #16]
 80007ca:	6022      	str	r2, [r4, #0]
 80007cc:	d504      	bpl.n	80007d8 <__sflush_r+0x7c>
 80007ce:	1c42      	adds	r2, r0, #1
 80007d0:	d101      	bne.n	80007d6 <__sflush_r+0x7a>
 80007d2:	682b      	ldr	r3, [r5, #0]
 80007d4:	b903      	cbnz	r3, 80007d8 <__sflush_r+0x7c>
 80007d6:	6560      	str	r0, [r4, #84]	; 0x54
 80007d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80007da:	602f      	str	r7, [r5, #0]
 80007dc:	2900      	cmp	r1, #0
 80007de:	d0ca      	beq.n	8000776 <__sflush_r+0x1a>
 80007e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80007e4:	4299      	cmp	r1, r3
 80007e6:	d002      	beq.n	80007ee <__sflush_r+0x92>
 80007e8:	4628      	mov	r0, r5
 80007ea:	f000 f9d7 	bl	8000b9c <_free_r>
 80007ee:	2000      	movs	r0, #0
 80007f0:	6360      	str	r0, [r4, #52]	; 0x34
 80007f2:	e7c1      	b.n	8000778 <__sflush_r+0x1c>
 80007f4:	6a21      	ldr	r1, [r4, #32]
 80007f6:	2301      	movs	r3, #1
 80007f8:	4628      	mov	r0, r5
 80007fa:	47b0      	blx	r6
 80007fc:	1c41      	adds	r1, r0, #1
 80007fe:	d1c7      	bne.n	8000790 <__sflush_r+0x34>
 8000800:	682b      	ldr	r3, [r5, #0]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d0c4      	beq.n	8000790 <__sflush_r+0x34>
 8000806:	2b1d      	cmp	r3, #29
 8000808:	d001      	beq.n	800080e <__sflush_r+0xb2>
 800080a:	2b16      	cmp	r3, #22
 800080c:	d101      	bne.n	8000812 <__sflush_r+0xb6>
 800080e:	602f      	str	r7, [r5, #0]
 8000810:	e7b1      	b.n	8000776 <__sflush_r+0x1a>
 8000812:	89a3      	ldrh	r3, [r4, #12]
 8000814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000818:	81a3      	strh	r3, [r4, #12]
 800081a:	e7ad      	b.n	8000778 <__sflush_r+0x1c>
 800081c:	690f      	ldr	r7, [r1, #16]
 800081e:	2f00      	cmp	r7, #0
 8000820:	d0a9      	beq.n	8000776 <__sflush_r+0x1a>
 8000822:	0793      	lsls	r3, r2, #30
 8000824:	680e      	ldr	r6, [r1, #0]
 8000826:	bf08      	it	eq
 8000828:	694b      	ldreq	r3, [r1, #20]
 800082a:	600f      	str	r7, [r1, #0]
 800082c:	bf18      	it	ne
 800082e:	2300      	movne	r3, #0
 8000830:	eba6 0807 	sub.w	r8, r6, r7
 8000834:	608b      	str	r3, [r1, #8]
 8000836:	f1b8 0f00 	cmp.w	r8, #0
 800083a:	dd9c      	ble.n	8000776 <__sflush_r+0x1a>
 800083c:	6a21      	ldr	r1, [r4, #32]
 800083e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000840:	4643      	mov	r3, r8
 8000842:	463a      	mov	r2, r7
 8000844:	4628      	mov	r0, r5
 8000846:	47b0      	blx	r6
 8000848:	2800      	cmp	r0, #0
 800084a:	dc06      	bgt.n	800085a <__sflush_r+0xfe>
 800084c:	89a3      	ldrh	r3, [r4, #12]
 800084e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000852:	81a3      	strh	r3, [r4, #12]
 8000854:	f04f 30ff 	mov.w	r0, #4294967295
 8000858:	e78e      	b.n	8000778 <__sflush_r+0x1c>
 800085a:	4407      	add	r7, r0
 800085c:	eba8 0800 	sub.w	r8, r8, r0
 8000860:	e7e9      	b.n	8000836 <__sflush_r+0xda>
 8000862:	bf00      	nop
 8000864:	20400001 	.word	0x20400001

08000868 <_fflush_r>:
 8000868:	b538      	push	{r3, r4, r5, lr}
 800086a:	690b      	ldr	r3, [r1, #16]
 800086c:	4605      	mov	r5, r0
 800086e:	460c      	mov	r4, r1
 8000870:	b913      	cbnz	r3, 8000878 <_fflush_r+0x10>
 8000872:	2500      	movs	r5, #0
 8000874:	4628      	mov	r0, r5
 8000876:	bd38      	pop	{r3, r4, r5, pc}
 8000878:	b118      	cbz	r0, 8000882 <_fflush_r+0x1a>
 800087a:	6983      	ldr	r3, [r0, #24]
 800087c:	b90b      	cbnz	r3, 8000882 <_fflush_r+0x1a>
 800087e:	f000 f887 	bl	8000990 <__sinit>
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <_fflush_r+0x6c>)
 8000884:	429c      	cmp	r4, r3
 8000886:	d11b      	bne.n	80008c0 <_fflush_r+0x58>
 8000888:	686c      	ldr	r4, [r5, #4]
 800088a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d0ef      	beq.n	8000872 <_fflush_r+0xa>
 8000892:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000894:	07d0      	lsls	r0, r2, #31
 8000896:	d404      	bmi.n	80008a2 <_fflush_r+0x3a>
 8000898:	0599      	lsls	r1, r3, #22
 800089a:	d402      	bmi.n	80008a2 <_fflush_r+0x3a>
 800089c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800089e:	f000 f915 	bl	8000acc <__retarget_lock_acquire_recursive>
 80008a2:	4628      	mov	r0, r5
 80008a4:	4621      	mov	r1, r4
 80008a6:	f7ff ff59 	bl	800075c <__sflush_r>
 80008aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80008ac:	07da      	lsls	r2, r3, #31
 80008ae:	4605      	mov	r5, r0
 80008b0:	d4e0      	bmi.n	8000874 <_fflush_r+0xc>
 80008b2:	89a3      	ldrh	r3, [r4, #12]
 80008b4:	059b      	lsls	r3, r3, #22
 80008b6:	d4dd      	bmi.n	8000874 <_fflush_r+0xc>
 80008b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80008ba:	f000 f908 	bl	8000ace <__retarget_lock_release_recursive>
 80008be:	e7d9      	b.n	8000874 <_fflush_r+0xc>
 80008c0:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <_fflush_r+0x70>)
 80008c2:	429c      	cmp	r4, r3
 80008c4:	d101      	bne.n	80008ca <_fflush_r+0x62>
 80008c6:	68ac      	ldr	r4, [r5, #8]
 80008c8:	e7df      	b.n	800088a <_fflush_r+0x22>
 80008ca:	4b04      	ldr	r3, [pc, #16]	; (80008dc <_fflush_r+0x74>)
 80008cc:	429c      	cmp	r4, r3
 80008ce:	bf08      	it	eq
 80008d0:	68ec      	ldreq	r4, [r5, #12]
 80008d2:	e7da      	b.n	800088a <_fflush_r+0x22>
 80008d4:	08000f44 	.word	0x08000f44
 80008d8:	08000f64 	.word	0x08000f64
 80008dc:	08000f24 	.word	0x08000f24

080008e0 <std>:
 80008e0:	2300      	movs	r3, #0
 80008e2:	b510      	push	{r4, lr}
 80008e4:	4604      	mov	r4, r0
 80008e6:	e9c0 3300 	strd	r3, r3, [r0]
 80008ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80008ee:	6083      	str	r3, [r0, #8]
 80008f0:	8181      	strh	r1, [r0, #12]
 80008f2:	6643      	str	r3, [r0, #100]	; 0x64
 80008f4:	81c2      	strh	r2, [r0, #14]
 80008f6:	6183      	str	r3, [r0, #24]
 80008f8:	4619      	mov	r1, r3
 80008fa:	2208      	movs	r2, #8
 80008fc:	305c      	adds	r0, #92	; 0x5c
 80008fe:	f7ff fdef 	bl	80004e0 <memset>
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <std+0x38>)
 8000904:	6263      	str	r3, [r4, #36]	; 0x24
 8000906:	4b05      	ldr	r3, [pc, #20]	; (800091c <std+0x3c>)
 8000908:	62a3      	str	r3, [r4, #40]	; 0x28
 800090a:	4b05      	ldr	r3, [pc, #20]	; (8000920 <std+0x40>)
 800090c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800090e:	4b05      	ldr	r3, [pc, #20]	; (8000924 <std+0x44>)
 8000910:	6224      	str	r4, [r4, #32]
 8000912:	6323      	str	r3, [r4, #48]	; 0x30
 8000914:	bd10      	pop	{r4, pc}
 8000916:	bf00      	nop
 8000918:	08000d7d 	.word	0x08000d7d
 800091c:	08000d9f 	.word	0x08000d9f
 8000920:	08000dd7 	.word	0x08000dd7
 8000924:	08000dfb 	.word	0x08000dfb

08000928 <_cleanup_r>:
 8000928:	4901      	ldr	r1, [pc, #4]	; (8000930 <_cleanup_r+0x8>)
 800092a:	f000 b8af 	b.w	8000a8c <_fwalk_reent>
 800092e:	bf00      	nop
 8000930:	08000869 	.word	0x08000869

08000934 <__sfmoreglue>:
 8000934:	b570      	push	{r4, r5, r6, lr}
 8000936:	2268      	movs	r2, #104	; 0x68
 8000938:	1e4d      	subs	r5, r1, #1
 800093a:	4355      	muls	r5, r2
 800093c:	460e      	mov	r6, r1
 800093e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000942:	f000 f997 	bl	8000c74 <_malloc_r>
 8000946:	4604      	mov	r4, r0
 8000948:	b140      	cbz	r0, 800095c <__sfmoreglue+0x28>
 800094a:	2100      	movs	r1, #0
 800094c:	e9c0 1600 	strd	r1, r6, [r0]
 8000950:	300c      	adds	r0, #12
 8000952:	60a0      	str	r0, [r4, #8]
 8000954:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000958:	f7ff fdc2 	bl	80004e0 <memset>
 800095c:	4620      	mov	r0, r4
 800095e:	bd70      	pop	{r4, r5, r6, pc}

08000960 <__sfp_lock_acquire>:
 8000960:	4801      	ldr	r0, [pc, #4]	; (8000968 <__sfp_lock_acquire+0x8>)
 8000962:	f000 b8b3 	b.w	8000acc <__retarget_lock_acquire_recursive>
 8000966:	bf00      	nop
 8000968:	2000008d 	.word	0x2000008d

0800096c <__sfp_lock_release>:
 800096c:	4801      	ldr	r0, [pc, #4]	; (8000974 <__sfp_lock_release+0x8>)
 800096e:	f000 b8ae 	b.w	8000ace <__retarget_lock_release_recursive>
 8000972:	bf00      	nop
 8000974:	2000008d 	.word	0x2000008d

08000978 <__sinit_lock_acquire>:
 8000978:	4801      	ldr	r0, [pc, #4]	; (8000980 <__sinit_lock_acquire+0x8>)
 800097a:	f000 b8a7 	b.w	8000acc <__retarget_lock_acquire_recursive>
 800097e:	bf00      	nop
 8000980:	2000008e 	.word	0x2000008e

08000984 <__sinit_lock_release>:
 8000984:	4801      	ldr	r0, [pc, #4]	; (800098c <__sinit_lock_release+0x8>)
 8000986:	f000 b8a2 	b.w	8000ace <__retarget_lock_release_recursive>
 800098a:	bf00      	nop
 800098c:	2000008e 	.word	0x2000008e

08000990 <__sinit>:
 8000990:	b510      	push	{r4, lr}
 8000992:	4604      	mov	r4, r0
 8000994:	f7ff fff0 	bl	8000978 <__sinit_lock_acquire>
 8000998:	69a3      	ldr	r3, [r4, #24]
 800099a:	b11b      	cbz	r3, 80009a4 <__sinit+0x14>
 800099c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009a0:	f7ff bff0 	b.w	8000984 <__sinit_lock_release>
 80009a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80009a8:	6523      	str	r3, [r4, #80]	; 0x50
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <__sinit+0x68>)
 80009ac:	4a13      	ldr	r2, [pc, #76]	; (80009fc <__sinit+0x6c>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80009b2:	42a3      	cmp	r3, r4
 80009b4:	bf04      	itt	eq
 80009b6:	2301      	moveq	r3, #1
 80009b8:	61a3      	streq	r3, [r4, #24]
 80009ba:	4620      	mov	r0, r4
 80009bc:	f000 f820 	bl	8000a00 <__sfp>
 80009c0:	6060      	str	r0, [r4, #4]
 80009c2:	4620      	mov	r0, r4
 80009c4:	f000 f81c 	bl	8000a00 <__sfp>
 80009c8:	60a0      	str	r0, [r4, #8]
 80009ca:	4620      	mov	r0, r4
 80009cc:	f000 f818 	bl	8000a00 <__sfp>
 80009d0:	2200      	movs	r2, #0
 80009d2:	60e0      	str	r0, [r4, #12]
 80009d4:	2104      	movs	r1, #4
 80009d6:	6860      	ldr	r0, [r4, #4]
 80009d8:	f7ff ff82 	bl	80008e0 <std>
 80009dc:	68a0      	ldr	r0, [r4, #8]
 80009de:	2201      	movs	r2, #1
 80009e0:	2109      	movs	r1, #9
 80009e2:	f7ff ff7d 	bl	80008e0 <std>
 80009e6:	68e0      	ldr	r0, [r4, #12]
 80009e8:	2202      	movs	r2, #2
 80009ea:	2112      	movs	r1, #18
 80009ec:	f7ff ff78 	bl	80008e0 <std>
 80009f0:	2301      	movs	r3, #1
 80009f2:	61a3      	str	r3, [r4, #24]
 80009f4:	e7d2      	b.n	800099c <__sinit+0xc>
 80009f6:	bf00      	nop
 80009f8:	08000f20 	.word	0x08000f20
 80009fc:	08000929 	.word	0x08000929

08000a00 <__sfp>:
 8000a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a02:	4607      	mov	r7, r0
 8000a04:	f7ff ffac 	bl	8000960 <__sfp_lock_acquire>
 8000a08:	4b1e      	ldr	r3, [pc, #120]	; (8000a84 <__sfp+0x84>)
 8000a0a:	681e      	ldr	r6, [r3, #0]
 8000a0c:	69b3      	ldr	r3, [r6, #24]
 8000a0e:	b913      	cbnz	r3, 8000a16 <__sfp+0x16>
 8000a10:	4630      	mov	r0, r6
 8000a12:	f7ff ffbd 	bl	8000990 <__sinit>
 8000a16:	3648      	adds	r6, #72	; 0x48
 8000a18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	d503      	bpl.n	8000a28 <__sfp+0x28>
 8000a20:	6833      	ldr	r3, [r6, #0]
 8000a22:	b30b      	cbz	r3, 8000a68 <__sfp+0x68>
 8000a24:	6836      	ldr	r6, [r6, #0]
 8000a26:	e7f7      	b.n	8000a18 <__sfp+0x18>
 8000a28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000a2c:	b9d5      	cbnz	r5, 8000a64 <__sfp+0x64>
 8000a2e:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <__sfp+0x88>)
 8000a30:	60e3      	str	r3, [r4, #12]
 8000a32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000a36:	6665      	str	r5, [r4, #100]	; 0x64
 8000a38:	f000 f847 	bl	8000aca <__retarget_lock_init_recursive>
 8000a3c:	f7ff ff96 	bl	800096c <__sfp_lock_release>
 8000a40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000a44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000a48:	6025      	str	r5, [r4, #0]
 8000a4a:	61a5      	str	r5, [r4, #24]
 8000a4c:	2208      	movs	r2, #8
 8000a4e:	4629      	mov	r1, r5
 8000a50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000a54:	f7ff fd44 	bl	80004e0 <memset>
 8000a58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000a5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000a60:	4620      	mov	r0, r4
 8000a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a64:	3468      	adds	r4, #104	; 0x68
 8000a66:	e7d9      	b.n	8000a1c <__sfp+0x1c>
 8000a68:	2104      	movs	r1, #4
 8000a6a:	4638      	mov	r0, r7
 8000a6c:	f7ff ff62 	bl	8000934 <__sfmoreglue>
 8000a70:	4604      	mov	r4, r0
 8000a72:	6030      	str	r0, [r6, #0]
 8000a74:	2800      	cmp	r0, #0
 8000a76:	d1d5      	bne.n	8000a24 <__sfp+0x24>
 8000a78:	f7ff ff78 	bl	800096c <__sfp_lock_release>
 8000a7c:	230c      	movs	r3, #12
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	e7ee      	b.n	8000a60 <__sfp+0x60>
 8000a82:	bf00      	nop
 8000a84:	08000f20 	.word	0x08000f20
 8000a88:	ffff0001 	.word	0xffff0001

08000a8c <_fwalk_reent>:
 8000a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a90:	4606      	mov	r6, r0
 8000a92:	4688      	mov	r8, r1
 8000a94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000a98:	2700      	movs	r7, #0
 8000a9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000a9e:	f1b9 0901 	subs.w	r9, r9, #1
 8000aa2:	d505      	bpl.n	8000ab0 <_fwalk_reent+0x24>
 8000aa4:	6824      	ldr	r4, [r4, #0]
 8000aa6:	2c00      	cmp	r4, #0
 8000aa8:	d1f7      	bne.n	8000a9a <_fwalk_reent+0xe>
 8000aaa:	4638      	mov	r0, r7
 8000aac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ab0:	89ab      	ldrh	r3, [r5, #12]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d907      	bls.n	8000ac6 <_fwalk_reent+0x3a>
 8000ab6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000aba:	3301      	adds	r3, #1
 8000abc:	d003      	beq.n	8000ac6 <_fwalk_reent+0x3a>
 8000abe:	4629      	mov	r1, r5
 8000ac0:	4630      	mov	r0, r6
 8000ac2:	47c0      	blx	r8
 8000ac4:	4307      	orrs	r7, r0
 8000ac6:	3568      	adds	r5, #104	; 0x68
 8000ac8:	e7e9      	b.n	8000a9e <_fwalk_reent+0x12>

08000aca <__retarget_lock_init_recursive>:
 8000aca:	4770      	bx	lr

08000acc <__retarget_lock_acquire_recursive>:
 8000acc:	4770      	bx	lr

08000ace <__retarget_lock_release_recursive>:
 8000ace:	4770      	bx	lr

08000ad0 <__swhatbuf_r>:
 8000ad0:	b570      	push	{r4, r5, r6, lr}
 8000ad2:	460e      	mov	r6, r1
 8000ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ad8:	2900      	cmp	r1, #0
 8000ada:	b096      	sub	sp, #88	; 0x58
 8000adc:	4614      	mov	r4, r2
 8000ade:	461d      	mov	r5, r3
 8000ae0:	da08      	bge.n	8000af4 <__swhatbuf_r+0x24>
 8000ae2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	602a      	str	r2, [r5, #0]
 8000aea:	061a      	lsls	r2, r3, #24
 8000aec:	d410      	bmi.n	8000b10 <__swhatbuf_r+0x40>
 8000aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000af2:	e00e      	b.n	8000b12 <__swhatbuf_r+0x42>
 8000af4:	466a      	mov	r2, sp
 8000af6:	f000 f9a7 	bl	8000e48 <_fstat_r>
 8000afa:	2800      	cmp	r0, #0
 8000afc:	dbf1      	blt.n	8000ae2 <__swhatbuf_r+0x12>
 8000afe:	9a01      	ldr	r2, [sp, #4]
 8000b00:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000b04:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000b08:	425a      	negs	r2, r3
 8000b0a:	415a      	adcs	r2, r3
 8000b0c:	602a      	str	r2, [r5, #0]
 8000b0e:	e7ee      	b.n	8000aee <__swhatbuf_r+0x1e>
 8000b10:	2340      	movs	r3, #64	; 0x40
 8000b12:	2000      	movs	r0, #0
 8000b14:	6023      	str	r3, [r4, #0]
 8000b16:	b016      	add	sp, #88	; 0x58
 8000b18:	bd70      	pop	{r4, r5, r6, pc}
	...

08000b1c <__smakebuf_r>:
 8000b1c:	898b      	ldrh	r3, [r1, #12]
 8000b1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000b20:	079d      	lsls	r5, r3, #30
 8000b22:	4606      	mov	r6, r0
 8000b24:	460c      	mov	r4, r1
 8000b26:	d507      	bpl.n	8000b38 <__smakebuf_r+0x1c>
 8000b28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000b2c:	6023      	str	r3, [r4, #0]
 8000b2e:	6123      	str	r3, [r4, #16]
 8000b30:	2301      	movs	r3, #1
 8000b32:	6163      	str	r3, [r4, #20]
 8000b34:	b002      	add	sp, #8
 8000b36:	bd70      	pop	{r4, r5, r6, pc}
 8000b38:	ab01      	add	r3, sp, #4
 8000b3a:	466a      	mov	r2, sp
 8000b3c:	f7ff ffc8 	bl	8000ad0 <__swhatbuf_r>
 8000b40:	9900      	ldr	r1, [sp, #0]
 8000b42:	4605      	mov	r5, r0
 8000b44:	4630      	mov	r0, r6
 8000b46:	f000 f895 	bl	8000c74 <_malloc_r>
 8000b4a:	b948      	cbnz	r0, 8000b60 <__smakebuf_r+0x44>
 8000b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b50:	059a      	lsls	r2, r3, #22
 8000b52:	d4ef      	bmi.n	8000b34 <__smakebuf_r+0x18>
 8000b54:	f023 0303 	bic.w	r3, r3, #3
 8000b58:	f043 0302 	orr.w	r3, r3, #2
 8000b5c:	81a3      	strh	r3, [r4, #12]
 8000b5e:	e7e3      	b.n	8000b28 <__smakebuf_r+0xc>
 8000b60:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <__smakebuf_r+0x7c>)
 8000b62:	62b3      	str	r3, [r6, #40]	; 0x28
 8000b64:	89a3      	ldrh	r3, [r4, #12]
 8000b66:	6020      	str	r0, [r4, #0]
 8000b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b6c:	81a3      	strh	r3, [r4, #12]
 8000b6e:	9b00      	ldr	r3, [sp, #0]
 8000b70:	6163      	str	r3, [r4, #20]
 8000b72:	9b01      	ldr	r3, [sp, #4]
 8000b74:	6120      	str	r0, [r4, #16]
 8000b76:	b15b      	cbz	r3, 8000b90 <__smakebuf_r+0x74>
 8000b78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000b7c:	4630      	mov	r0, r6
 8000b7e:	f000 f975 	bl	8000e6c <_isatty_r>
 8000b82:	b128      	cbz	r0, 8000b90 <__smakebuf_r+0x74>
 8000b84:	89a3      	ldrh	r3, [r4, #12]
 8000b86:	f023 0303 	bic.w	r3, r3, #3
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	81a3      	strh	r3, [r4, #12]
 8000b90:	89a0      	ldrh	r0, [r4, #12]
 8000b92:	4305      	orrs	r5, r0
 8000b94:	81a5      	strh	r5, [r4, #12]
 8000b96:	e7cd      	b.n	8000b34 <__smakebuf_r+0x18>
 8000b98:	08000929 	.word	0x08000929

08000b9c <_free_r>:
 8000b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000b9e:	2900      	cmp	r1, #0
 8000ba0:	d044      	beq.n	8000c2c <_free_r+0x90>
 8000ba2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ba6:	9001      	str	r0, [sp, #4]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	f1a1 0404 	sub.w	r4, r1, #4
 8000bae:	bfb8      	it	lt
 8000bb0:	18e4      	addlt	r4, r4, r3
 8000bb2:	f000 f97d 	bl	8000eb0 <__malloc_lock>
 8000bb6:	4a1e      	ldr	r2, [pc, #120]	; (8000c30 <_free_r+0x94>)
 8000bb8:	9801      	ldr	r0, [sp, #4]
 8000bba:	6813      	ldr	r3, [r2, #0]
 8000bbc:	b933      	cbnz	r3, 8000bcc <_free_r+0x30>
 8000bbe:	6063      	str	r3, [r4, #4]
 8000bc0:	6014      	str	r4, [r2, #0]
 8000bc2:	b003      	add	sp, #12
 8000bc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000bc8:	f000 b978 	b.w	8000ebc <__malloc_unlock>
 8000bcc:	42a3      	cmp	r3, r4
 8000bce:	d908      	bls.n	8000be2 <_free_r+0x46>
 8000bd0:	6825      	ldr	r5, [r4, #0]
 8000bd2:	1961      	adds	r1, r4, r5
 8000bd4:	428b      	cmp	r3, r1
 8000bd6:	bf01      	itttt	eq
 8000bd8:	6819      	ldreq	r1, [r3, #0]
 8000bda:	685b      	ldreq	r3, [r3, #4]
 8000bdc:	1949      	addeq	r1, r1, r5
 8000bde:	6021      	streq	r1, [r4, #0]
 8000be0:	e7ed      	b.n	8000bbe <_free_r+0x22>
 8000be2:	461a      	mov	r2, r3
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	b10b      	cbz	r3, 8000bec <_free_r+0x50>
 8000be8:	42a3      	cmp	r3, r4
 8000bea:	d9fa      	bls.n	8000be2 <_free_r+0x46>
 8000bec:	6811      	ldr	r1, [r2, #0]
 8000bee:	1855      	adds	r5, r2, r1
 8000bf0:	42a5      	cmp	r5, r4
 8000bf2:	d10b      	bne.n	8000c0c <_free_r+0x70>
 8000bf4:	6824      	ldr	r4, [r4, #0]
 8000bf6:	4421      	add	r1, r4
 8000bf8:	1854      	adds	r4, r2, r1
 8000bfa:	42a3      	cmp	r3, r4
 8000bfc:	6011      	str	r1, [r2, #0]
 8000bfe:	d1e0      	bne.n	8000bc2 <_free_r+0x26>
 8000c00:	681c      	ldr	r4, [r3, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	6053      	str	r3, [r2, #4]
 8000c06:	4421      	add	r1, r4
 8000c08:	6011      	str	r1, [r2, #0]
 8000c0a:	e7da      	b.n	8000bc2 <_free_r+0x26>
 8000c0c:	d902      	bls.n	8000c14 <_free_r+0x78>
 8000c0e:	230c      	movs	r3, #12
 8000c10:	6003      	str	r3, [r0, #0]
 8000c12:	e7d6      	b.n	8000bc2 <_free_r+0x26>
 8000c14:	6825      	ldr	r5, [r4, #0]
 8000c16:	1961      	adds	r1, r4, r5
 8000c18:	428b      	cmp	r3, r1
 8000c1a:	bf04      	itt	eq
 8000c1c:	6819      	ldreq	r1, [r3, #0]
 8000c1e:	685b      	ldreq	r3, [r3, #4]
 8000c20:	6063      	str	r3, [r4, #4]
 8000c22:	bf04      	itt	eq
 8000c24:	1949      	addeq	r1, r1, r5
 8000c26:	6021      	streq	r1, [r4, #0]
 8000c28:	6054      	str	r4, [r2, #4]
 8000c2a:	e7ca      	b.n	8000bc2 <_free_r+0x26>
 8000c2c:	b003      	add	sp, #12
 8000c2e:	bd30      	pop	{r4, r5, pc}
 8000c30:	20000090 	.word	0x20000090

08000c34 <sbrk_aligned>:
 8000c34:	b570      	push	{r4, r5, r6, lr}
 8000c36:	4e0e      	ldr	r6, [pc, #56]	; (8000c70 <sbrk_aligned+0x3c>)
 8000c38:	460c      	mov	r4, r1
 8000c3a:	6831      	ldr	r1, [r6, #0]
 8000c3c:	4605      	mov	r5, r0
 8000c3e:	b911      	cbnz	r1, 8000c46 <sbrk_aligned+0x12>
 8000c40:	f000 f88c 	bl	8000d5c <_sbrk_r>
 8000c44:	6030      	str	r0, [r6, #0]
 8000c46:	4621      	mov	r1, r4
 8000c48:	4628      	mov	r0, r5
 8000c4a:	f000 f887 	bl	8000d5c <_sbrk_r>
 8000c4e:	1c43      	adds	r3, r0, #1
 8000c50:	d00a      	beq.n	8000c68 <sbrk_aligned+0x34>
 8000c52:	1cc4      	adds	r4, r0, #3
 8000c54:	f024 0403 	bic.w	r4, r4, #3
 8000c58:	42a0      	cmp	r0, r4
 8000c5a:	d007      	beq.n	8000c6c <sbrk_aligned+0x38>
 8000c5c:	1a21      	subs	r1, r4, r0
 8000c5e:	4628      	mov	r0, r5
 8000c60:	f000 f87c 	bl	8000d5c <_sbrk_r>
 8000c64:	3001      	adds	r0, #1
 8000c66:	d101      	bne.n	8000c6c <sbrk_aligned+0x38>
 8000c68:	f04f 34ff 	mov.w	r4, #4294967295
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	bd70      	pop	{r4, r5, r6, pc}
 8000c70:	20000094 	.word	0x20000094

08000c74 <_malloc_r>:
 8000c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c78:	1ccd      	adds	r5, r1, #3
 8000c7a:	f025 0503 	bic.w	r5, r5, #3
 8000c7e:	3508      	adds	r5, #8
 8000c80:	2d0c      	cmp	r5, #12
 8000c82:	bf38      	it	cc
 8000c84:	250c      	movcc	r5, #12
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	4607      	mov	r7, r0
 8000c8a:	db01      	blt.n	8000c90 <_malloc_r+0x1c>
 8000c8c:	42a9      	cmp	r1, r5
 8000c8e:	d905      	bls.n	8000c9c <_malloc_r+0x28>
 8000c90:	230c      	movs	r3, #12
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	2600      	movs	r6, #0
 8000c96:	4630      	mov	r0, r6
 8000c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c9c:	4e2e      	ldr	r6, [pc, #184]	; (8000d58 <_malloc_r+0xe4>)
 8000c9e:	f000 f907 	bl	8000eb0 <__malloc_lock>
 8000ca2:	6833      	ldr	r3, [r6, #0]
 8000ca4:	461c      	mov	r4, r3
 8000ca6:	bb34      	cbnz	r4, 8000cf6 <_malloc_r+0x82>
 8000ca8:	4629      	mov	r1, r5
 8000caa:	4638      	mov	r0, r7
 8000cac:	f7ff ffc2 	bl	8000c34 <sbrk_aligned>
 8000cb0:	1c43      	adds	r3, r0, #1
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	d14d      	bne.n	8000d52 <_malloc_r+0xde>
 8000cb6:	6834      	ldr	r4, [r6, #0]
 8000cb8:	4626      	mov	r6, r4
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	d140      	bne.n	8000d40 <_malloc_r+0xcc>
 8000cbe:	6823      	ldr	r3, [r4, #0]
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	4638      	mov	r0, r7
 8000cc4:	eb04 0803 	add.w	r8, r4, r3
 8000cc8:	f000 f848 	bl	8000d5c <_sbrk_r>
 8000ccc:	4580      	cmp	r8, r0
 8000cce:	d13a      	bne.n	8000d46 <_malloc_r+0xd2>
 8000cd0:	6821      	ldr	r1, [r4, #0]
 8000cd2:	3503      	adds	r5, #3
 8000cd4:	1a6d      	subs	r5, r5, r1
 8000cd6:	f025 0503 	bic.w	r5, r5, #3
 8000cda:	3508      	adds	r5, #8
 8000cdc:	2d0c      	cmp	r5, #12
 8000cde:	bf38      	it	cc
 8000ce0:	250c      	movcc	r5, #12
 8000ce2:	4629      	mov	r1, r5
 8000ce4:	4638      	mov	r0, r7
 8000ce6:	f7ff ffa5 	bl	8000c34 <sbrk_aligned>
 8000cea:	3001      	adds	r0, #1
 8000cec:	d02b      	beq.n	8000d46 <_malloc_r+0xd2>
 8000cee:	6823      	ldr	r3, [r4, #0]
 8000cf0:	442b      	add	r3, r5
 8000cf2:	6023      	str	r3, [r4, #0]
 8000cf4:	e00e      	b.n	8000d14 <_malloc_r+0xa0>
 8000cf6:	6822      	ldr	r2, [r4, #0]
 8000cf8:	1b52      	subs	r2, r2, r5
 8000cfa:	d41e      	bmi.n	8000d3a <_malloc_r+0xc6>
 8000cfc:	2a0b      	cmp	r2, #11
 8000cfe:	d916      	bls.n	8000d2e <_malloc_r+0xba>
 8000d00:	1961      	adds	r1, r4, r5
 8000d02:	42a3      	cmp	r3, r4
 8000d04:	6025      	str	r5, [r4, #0]
 8000d06:	bf18      	it	ne
 8000d08:	6059      	strne	r1, [r3, #4]
 8000d0a:	6863      	ldr	r3, [r4, #4]
 8000d0c:	bf08      	it	eq
 8000d0e:	6031      	streq	r1, [r6, #0]
 8000d10:	5162      	str	r2, [r4, r5]
 8000d12:	604b      	str	r3, [r1, #4]
 8000d14:	4638      	mov	r0, r7
 8000d16:	f104 060b 	add.w	r6, r4, #11
 8000d1a:	f000 f8cf 	bl	8000ebc <__malloc_unlock>
 8000d1e:	f026 0607 	bic.w	r6, r6, #7
 8000d22:	1d23      	adds	r3, r4, #4
 8000d24:	1af2      	subs	r2, r6, r3
 8000d26:	d0b6      	beq.n	8000c96 <_malloc_r+0x22>
 8000d28:	1b9b      	subs	r3, r3, r6
 8000d2a:	50a3      	str	r3, [r4, r2]
 8000d2c:	e7b3      	b.n	8000c96 <_malloc_r+0x22>
 8000d2e:	6862      	ldr	r2, [r4, #4]
 8000d30:	42a3      	cmp	r3, r4
 8000d32:	bf0c      	ite	eq
 8000d34:	6032      	streq	r2, [r6, #0]
 8000d36:	605a      	strne	r2, [r3, #4]
 8000d38:	e7ec      	b.n	8000d14 <_malloc_r+0xa0>
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	6864      	ldr	r4, [r4, #4]
 8000d3e:	e7b2      	b.n	8000ca6 <_malloc_r+0x32>
 8000d40:	4634      	mov	r4, r6
 8000d42:	6876      	ldr	r6, [r6, #4]
 8000d44:	e7b9      	b.n	8000cba <_malloc_r+0x46>
 8000d46:	230c      	movs	r3, #12
 8000d48:	603b      	str	r3, [r7, #0]
 8000d4a:	4638      	mov	r0, r7
 8000d4c:	f000 f8b6 	bl	8000ebc <__malloc_unlock>
 8000d50:	e7a1      	b.n	8000c96 <_malloc_r+0x22>
 8000d52:	6025      	str	r5, [r4, #0]
 8000d54:	e7de      	b.n	8000d14 <_malloc_r+0xa0>
 8000d56:	bf00      	nop
 8000d58:	20000090 	.word	0x20000090

08000d5c <_sbrk_r>:
 8000d5c:	b538      	push	{r3, r4, r5, lr}
 8000d5e:	4d06      	ldr	r5, [pc, #24]	; (8000d78 <_sbrk_r+0x1c>)
 8000d60:	2300      	movs	r3, #0
 8000d62:	4604      	mov	r4, r0
 8000d64:	4608      	mov	r0, r1
 8000d66:	602b      	str	r3, [r5, #0]
 8000d68:	f7ff fb0a 	bl	8000380 <_sbrk>
 8000d6c:	1c43      	adds	r3, r0, #1
 8000d6e:	d102      	bne.n	8000d76 <_sbrk_r+0x1a>
 8000d70:	682b      	ldr	r3, [r5, #0]
 8000d72:	b103      	cbz	r3, 8000d76 <_sbrk_r+0x1a>
 8000d74:	6023      	str	r3, [r4, #0]
 8000d76:	bd38      	pop	{r3, r4, r5, pc}
 8000d78:	20000098 	.word	0x20000098

08000d7c <__sread>:
 8000d7c:	b510      	push	{r4, lr}
 8000d7e:	460c      	mov	r4, r1
 8000d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d84:	f000 f8a0 	bl	8000ec8 <_read_r>
 8000d88:	2800      	cmp	r0, #0
 8000d8a:	bfab      	itete	ge
 8000d8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000d8e:	89a3      	ldrhlt	r3, [r4, #12]
 8000d90:	181b      	addge	r3, r3, r0
 8000d92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000d96:	bfac      	ite	ge
 8000d98:	6563      	strge	r3, [r4, #84]	; 0x54
 8000d9a:	81a3      	strhlt	r3, [r4, #12]
 8000d9c:	bd10      	pop	{r4, pc}

08000d9e <__swrite>:
 8000d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000da2:	461f      	mov	r7, r3
 8000da4:	898b      	ldrh	r3, [r1, #12]
 8000da6:	05db      	lsls	r3, r3, #23
 8000da8:	4605      	mov	r5, r0
 8000daa:	460c      	mov	r4, r1
 8000dac:	4616      	mov	r6, r2
 8000dae:	d505      	bpl.n	8000dbc <__swrite+0x1e>
 8000db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000db4:	2302      	movs	r3, #2
 8000db6:	2200      	movs	r2, #0
 8000db8:	f000 f868 	bl	8000e8c <_lseek_r>
 8000dbc:	89a3      	ldrh	r3, [r4, #12]
 8000dbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000dc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000dc6:	81a3      	strh	r3, [r4, #12]
 8000dc8:	4632      	mov	r2, r6
 8000dca:	463b      	mov	r3, r7
 8000dcc:	4628      	mov	r0, r5
 8000dce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000dd2:	f000 b817 	b.w	8000e04 <_write_r>

08000dd6 <__sseek>:
 8000dd6:	b510      	push	{r4, lr}
 8000dd8:	460c      	mov	r4, r1
 8000dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000dde:	f000 f855 	bl	8000e8c <_lseek_r>
 8000de2:	1c43      	adds	r3, r0, #1
 8000de4:	89a3      	ldrh	r3, [r4, #12]
 8000de6:	bf15      	itete	ne
 8000de8:	6560      	strne	r0, [r4, #84]	; 0x54
 8000dea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000dee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000df2:	81a3      	strheq	r3, [r4, #12]
 8000df4:	bf18      	it	ne
 8000df6:	81a3      	strhne	r3, [r4, #12]
 8000df8:	bd10      	pop	{r4, pc}

08000dfa <__sclose>:
 8000dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000dfe:	f000 b813 	b.w	8000e28 <_close_r>
	...

08000e04 <_write_r>:
 8000e04:	b538      	push	{r3, r4, r5, lr}
 8000e06:	4d07      	ldr	r5, [pc, #28]	; (8000e24 <_write_r+0x20>)
 8000e08:	4604      	mov	r4, r0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	4611      	mov	r1, r2
 8000e0e:	2200      	movs	r2, #0
 8000e10:	602a      	str	r2, [r5, #0]
 8000e12:	461a      	mov	r2, r3
 8000e14:	f7ff fa63 	bl	80002de <_write>
 8000e18:	1c43      	adds	r3, r0, #1
 8000e1a:	d102      	bne.n	8000e22 <_write_r+0x1e>
 8000e1c:	682b      	ldr	r3, [r5, #0]
 8000e1e:	b103      	cbz	r3, 8000e22 <_write_r+0x1e>
 8000e20:	6023      	str	r3, [r4, #0]
 8000e22:	bd38      	pop	{r3, r4, r5, pc}
 8000e24:	20000098 	.word	0x20000098

08000e28 <_close_r>:
 8000e28:	b538      	push	{r3, r4, r5, lr}
 8000e2a:	4d06      	ldr	r5, [pc, #24]	; (8000e44 <_close_r+0x1c>)
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	4604      	mov	r4, r0
 8000e30:	4608      	mov	r0, r1
 8000e32:	602b      	str	r3, [r5, #0]
 8000e34:	f7ff fa6f 	bl	8000316 <_close>
 8000e38:	1c43      	adds	r3, r0, #1
 8000e3a:	d102      	bne.n	8000e42 <_close_r+0x1a>
 8000e3c:	682b      	ldr	r3, [r5, #0]
 8000e3e:	b103      	cbz	r3, 8000e42 <_close_r+0x1a>
 8000e40:	6023      	str	r3, [r4, #0]
 8000e42:	bd38      	pop	{r3, r4, r5, pc}
 8000e44:	20000098 	.word	0x20000098

08000e48 <_fstat_r>:
 8000e48:	b538      	push	{r3, r4, r5, lr}
 8000e4a:	4d07      	ldr	r5, [pc, #28]	; (8000e68 <_fstat_r+0x20>)
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	4604      	mov	r4, r0
 8000e50:	4608      	mov	r0, r1
 8000e52:	4611      	mov	r1, r2
 8000e54:	602b      	str	r3, [r5, #0]
 8000e56:	f7ff fa6a 	bl	800032e <_fstat>
 8000e5a:	1c43      	adds	r3, r0, #1
 8000e5c:	d102      	bne.n	8000e64 <_fstat_r+0x1c>
 8000e5e:	682b      	ldr	r3, [r5, #0]
 8000e60:	b103      	cbz	r3, 8000e64 <_fstat_r+0x1c>
 8000e62:	6023      	str	r3, [r4, #0]
 8000e64:	bd38      	pop	{r3, r4, r5, pc}
 8000e66:	bf00      	nop
 8000e68:	20000098 	.word	0x20000098

08000e6c <_isatty_r>:
 8000e6c:	b538      	push	{r3, r4, r5, lr}
 8000e6e:	4d06      	ldr	r5, [pc, #24]	; (8000e88 <_isatty_r+0x1c>)
 8000e70:	2300      	movs	r3, #0
 8000e72:	4604      	mov	r4, r0
 8000e74:	4608      	mov	r0, r1
 8000e76:	602b      	str	r3, [r5, #0]
 8000e78:	f7ff fa69 	bl	800034e <_isatty>
 8000e7c:	1c43      	adds	r3, r0, #1
 8000e7e:	d102      	bne.n	8000e86 <_isatty_r+0x1a>
 8000e80:	682b      	ldr	r3, [r5, #0]
 8000e82:	b103      	cbz	r3, 8000e86 <_isatty_r+0x1a>
 8000e84:	6023      	str	r3, [r4, #0]
 8000e86:	bd38      	pop	{r3, r4, r5, pc}
 8000e88:	20000098 	.word	0x20000098

08000e8c <_lseek_r>:
 8000e8c:	b538      	push	{r3, r4, r5, lr}
 8000e8e:	4d07      	ldr	r5, [pc, #28]	; (8000eac <_lseek_r+0x20>)
 8000e90:	4604      	mov	r4, r0
 8000e92:	4608      	mov	r0, r1
 8000e94:	4611      	mov	r1, r2
 8000e96:	2200      	movs	r2, #0
 8000e98:	602a      	str	r2, [r5, #0]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	f7ff fa62 	bl	8000364 <_lseek>
 8000ea0:	1c43      	adds	r3, r0, #1
 8000ea2:	d102      	bne.n	8000eaa <_lseek_r+0x1e>
 8000ea4:	682b      	ldr	r3, [r5, #0]
 8000ea6:	b103      	cbz	r3, 8000eaa <_lseek_r+0x1e>
 8000ea8:	6023      	str	r3, [r4, #0]
 8000eaa:	bd38      	pop	{r3, r4, r5, pc}
 8000eac:	20000098 	.word	0x20000098

08000eb0 <__malloc_lock>:
 8000eb0:	4801      	ldr	r0, [pc, #4]	; (8000eb8 <__malloc_lock+0x8>)
 8000eb2:	f7ff be0b 	b.w	8000acc <__retarget_lock_acquire_recursive>
 8000eb6:	bf00      	nop
 8000eb8:	2000008c 	.word	0x2000008c

08000ebc <__malloc_unlock>:
 8000ebc:	4801      	ldr	r0, [pc, #4]	; (8000ec4 <__malloc_unlock+0x8>)
 8000ebe:	f7ff be06 	b.w	8000ace <__retarget_lock_release_recursive>
 8000ec2:	bf00      	nop
 8000ec4:	2000008c 	.word	0x2000008c

08000ec8 <_read_r>:
 8000ec8:	b538      	push	{r3, r4, r5, lr}
 8000eca:	4d07      	ldr	r5, [pc, #28]	; (8000ee8 <_read_r+0x20>)
 8000ecc:	4604      	mov	r4, r0
 8000ece:	4608      	mov	r0, r1
 8000ed0:	4611      	mov	r1, r2
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	602a      	str	r2, [r5, #0]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	f7ff f9e4 	bl	80002a4 <_read>
 8000edc:	1c43      	adds	r3, r0, #1
 8000ede:	d102      	bne.n	8000ee6 <_read_r+0x1e>
 8000ee0:	682b      	ldr	r3, [r5, #0]
 8000ee2:	b103      	cbz	r3, 8000ee6 <_read_r+0x1e>
 8000ee4:	6023      	str	r3, [r4, #0]
 8000ee6:	bd38      	pop	{r3, r4, r5, pc}
 8000ee8:	20000098 	.word	0x20000098

08000eec <_init>:
 8000eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eee:	bf00      	nop
 8000ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ef2:	bc08      	pop	{r3}
 8000ef4:	469e      	mov	lr, r3
 8000ef6:	4770      	bx	lr

08000ef8 <_fini>:
 8000ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000efa:	bf00      	nop
 8000efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000efe:	bc08      	pop	{r3}
 8000f00:	469e      	mov	lr, r3
 8000f02:	4770      	bx	lr
